{
    "name": "tailscale",
    "displayName": "Tailscale",
    "description": "A Pulumi package for creating and managing Tailscale cloud resources.",
    "keywords": [
        "pulumi",
        "tailscale"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`tailscale` Terraform Provider](https://github.com/tailscale/terraform-provider-tailscale).",
    "repository": "https://github.com/pulumi/pulumi-tailscale",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-tailscale/sdk/go/tailscale",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Tailscale cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/tailscale/terraform-provider-tailscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-tailscale` repo](https://github.com/pulumi/pulumi-tailscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-tailscale` repo](https://github.com/tailscale/terraform-provider-tailscale/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/tailscale/terraform-provider-tailscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-tailscale` repo](https://github.com/pulumi/pulumi-tailscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-tailscale` repo](https://github.com/tailscale/terraform-provider-tailscale/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The API key to use for authenticating requests to the API. Can be set via the TAILSCALE_API_KEY environment variable.\nConflicts with 'oauth_client_id' and 'oauth_client_secret'.\n",
                "secret": true
            },
            "baseUrl": {
                "type": "string",
                "description": "The base URL of the Tailscale API. Defaults to https://api.tailscale.com. Can be set via the TAILSCALE_BASE_URL\nenvironment variable.\n"
            },
            "oauthClientId": {
                "type": "string",
                "description": "The OAuth application's ID when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_ID environment\nvariable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n"
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "The OAuth application's secret when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_SECRET\nenvironment variable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n",
                "secret": true
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The OAuth 2.0 scopes to request when for the access token generated using the supplied OAuth client credentials. See\nhttps://tailscale.com/kb/1215/oauth-clients/#scopes for available scopes. Only valid when both 'oauth_client_id' and\n'oauth_client_secret' are set.\n"
            },
            "tailnet": {
                "type": "string",
                "description": "The organization name of the Tailnet in which to perform actions. Can be set via the TAILSCALE_TAILNET environment\nvariable. Default is the tailnet that owns API credentials passed to the provider.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent header for API requests.\n"
            }
        }
    },
    "types": {
        "tailscale:index/getDevicesDevice:getDevicesDevice": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of device's IPs\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The short hostname of the device\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the device\n"
                },
                "name": {
                    "type": "string",
                    "description": "The full name of the device (e.g. `hostname.domain.ts.net`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags applied to the device\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user associated with the device\n"
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "hostname",
                "id",
                "name",
                "tags",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the tailscale package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "The API key to use for authenticating requests to the API. Can be set via the TAILSCALE_API_KEY environment variable.\nConflicts with 'oauth_client_id' and 'oauth_client_secret'.\n",
                "secret": true
            },
            "baseUrl": {
                "type": "string",
                "description": "The base URL of the Tailscale API. Defaults to https://api.tailscale.com. Can be set via the TAILSCALE_BASE_URL\nenvironment variable.\n"
            },
            "oauthClientId": {
                "type": "string",
                "description": "The OAuth application's ID when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_ID environment\nvariable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n"
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "The OAuth application's secret when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_SECRET\nenvironment variable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n",
                "secret": true
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The OAuth 2.0 scopes to request when for the access token generated using the supplied OAuth client credentials. See\nhttps://tailscale.com/kb/1215/oauth-clients/#scopes for available scopes. Only valid when both 'oauth_client_id' and\n'oauth_client_secret' are set.\n"
            },
            "tailnet": {
                "type": "string",
                "description": "The organization name of the Tailnet in which to perform actions. Can be set via the TAILSCALE_TAILNET environment\nvariable. Default is the tailnet that owns API credentials passed to the provider.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent header for API requests.\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The API key to use for authenticating requests to the API. Can be set via the TAILSCALE_API_KEY environment variable.\nConflicts with 'oauth_client_id' and 'oauth_client_secret'.\n",
                "secret": true
            },
            "baseUrl": {
                "type": "string",
                "description": "The base URL of the Tailscale API. Defaults to https://api.tailscale.com. Can be set via the TAILSCALE_BASE_URL\nenvironment variable.\n"
            },
            "oauthClientId": {
                "type": "string",
                "description": "The OAuth application's ID when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_ID environment\nvariable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n"
            },
            "oauthClientSecret": {
                "type": "string",
                "description": "The OAuth application's secret when using OAuth client credentials. Can be set via the TAILSCALE_OAUTH_CLIENT_SECRET\nenvironment variable. Both 'oauth_client_id' and 'oauth_client_secret' must be set. Conflicts with 'api_key'.\n",
                "secret": true
            },
            "scopes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The OAuth 2.0 scopes to request when for the access token generated using the supplied OAuth client credentials. See\nhttps://tailscale.com/kb/1215/oauth-clients/#scopes for available scopes. Only valid when both 'oauth_client_id' and\n'oauth_client_secret' are set.\n"
            },
            "tailnet": {
                "type": "string",
                "description": "The organization name of the Tailnet in which to perform actions. Can be set via the TAILSCALE_TAILNET environment\nvariable. Default is the tailnet that owns API credentials passed to the provider.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent header for API requests.\n"
            }
        }
    },
    "resources": {
        "tailscale:index/acl:Acl": {
            "description": "The acl resource allows you to configure a Tailscale ACL. See https://tailscale.com/kb/1018/acls for more information. Note that this resource will completely overwrite existing ACL contents for a given tailnet.\n\nIf tests are defined in the ACL (the top-level \"tests\" section), ACL validation will occur before creation and update operations are applied.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst asJson = new tailscale.Acl(\"as_json\", {acl: JSON.stringify({\n    acls: [{\n        action: \"accept\",\n        users: [\"*\"],\n        ports: [\"*:*\"],\n    }],\n})});\nconst asHujson = new tailscale.Acl(\"as_hujson\", {acl: `  {\n    // Comments in HuJSON policy are preserved when the policy is applied.\n    \"acls\": [\n      {\n        // Allow all users access to all ports.\n        action = \"accept\",\n        users  = [\"*\"],\n        ports  = [\"*:*\"],\n      },\n    ],\n  }\n`});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_tailscale as tailscale\n\nas_json = tailscale.Acl(\"as_json\", acl=json.dumps({\n    \"acls\": [{\n        \"action\": \"accept\",\n        \"users\": [\"*\"],\n        \"ports\": [\"*:*\"],\n    }],\n}))\nas_hujson = tailscale.Acl(\"as_hujson\", acl=\"\"\"  {\n    // Comments in HuJSON policy are preserved when the policy is applied.\n    \"acls\": [\n      {\n        // Allow all users access to all ports.\n        action = \"accept\",\n        users  = [\"*\"],\n        ports  = [\"*:*\"],\n      },\n    ],\n  }\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var asJson = new Tailscale.Acl(\"as_json\", new()\n    {\n        AclJson = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"acls\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"action\"] = \"accept\",\n                    [\"users\"] = new[]\n                    {\n                        \"*\",\n                    },\n                    [\"ports\"] = new[]\n                    {\n                        \"*:*\",\n                    },\n                },\n            },\n        }),\n    });\n\n    var asHujson = new Tailscale.Acl(\"as_hujson\", new()\n    {\n        AclJson = @\"  {\n    // Comments in HuJSON policy are preserved when the policy is applied.\n    \"\"acls\"\": [\n      {\n        // Allow all users access to all ports.\n        action = \"\"accept\"\",\n        users  = [\"\"*\"\"],\n        ports  = [\"\"*:*\"\"],\n      },\n    ],\n  }\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"acls\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"action\": \"accept\",\n\t\t\t\t\t\"users\": []string{\n\t\t\t\t\t\t\"*\",\n\t\t\t\t\t},\n\t\t\t\t\t\"ports\": []string{\n\t\t\t\t\t\t\"*:*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = tailscale.NewAcl(ctx, \"as_json\", \u0026tailscale.AclArgs{\n\t\t\tAcl: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewAcl(ctx, \"as_hujson\", \u0026tailscale.AclArgs{\n\t\t\tAcl: pulumi.String(`  {\n    // Comments in HuJSON policy are preserved when the policy is applied.\n    \"acls\": [\n      {\n        // Allow all users access to all ports.\n        action = \"accept\",\n        users  = [\"*\"],\n        ports  = [\"*:*\"],\n      },\n    ],\n  }\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.Acl;\nimport com.pulumi.tailscale.AclArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var asJson = new Acl(\"asJson\", AclArgs.builder()        \n            .acl(serializeJson(\n                jsonObject(\n                    jsonProperty(\"acls\", jsonArray(jsonObject(\n                        jsonProperty(\"action\", \"accept\"),\n                        jsonProperty(\"users\", jsonArray(\"*\")),\n                        jsonProperty(\"ports\", jsonArray(\"*:*\"))\n                    )))\n                )))\n            .build());\n\n        var asHujson = new Acl(\"asHujson\", AclArgs.builder()        \n            .acl(\"\"\"\n  {\n    // Comments in HuJSON policy are preserved when the policy is applied.\n    \"acls\": [\n      {\n        // Allow all users access to all ports.\n        action = \"accept\",\n        users  = [\"*\"],\n        ports  = [\"*:*\"],\n      },\n    ],\n  }\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  asJson:\n    type: tailscale:Acl\n    name: as_json\n    properties:\n      acl:\n        fn::toJSON:\n          acls:\n            - action: accept\n              users:\n                - '*'\n              ports:\n                - '*:*'\n  asHujson:\n    type: tailscale:Acl\n    name: as_hujson\n    properties:\n      acl: |2\n          {\n            // Comments in HuJSON policy are preserved when the policy is applied.\n            \"acls\": [\n              {\n                // Allow all users access to all ports.\n                action = \"accept\",\n                users  = [\"*\"],\n                ports  = [\"*:*\"],\n              },\n            ],\n          }\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nID doesn't matter.\n\n```sh\n$ pulumi import tailscale:index/acl:Acl sample_acl acl\n```\n\n",
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.\n",
                    "language": {
                        "csharp": {
                            "name": "AclJson"
                        }
                    }
                },
                "overwriteExistingContent": {
                    "type": "boolean",
                    "description": "If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten\n"
                }
            },
            "required": [
                "acl"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string",
                    "description": "The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.\n",
                    "language": {
                        "csharp": {
                            "name": "AclJson"
                        }
                    }
                },
                "overwriteExistingContent": {
                    "type": "boolean",
                    "description": "If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten\n"
                }
            },
            "requiredInputs": [
                "acl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "acl": {
                        "type": "string",
                        "description": "The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.\n",
                        "language": {
                            "csharp": {
                                "name": "AclJson"
                            }
                        }
                    },
                    "overwriteExistingContent": {
                        "type": "boolean",
                        "description": "If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/deviceAuthorization:DeviceAuthorization": {
            "description": "The device_authorization resource is used to approve new devices before they can join the tailnet. See https://tailscale.com/kb/1099/device-authorization/ for more details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleDevice = tailscale.getDevice({\n    name: \"device.example.com\",\n});\nconst sampleAuthorization = new tailscale.DeviceAuthorization(\"sample_authorization\", {\n    deviceId: sampleDevice.then(sampleDevice =\u003e sampleDevice.id),\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_device = tailscale.get_device(name=\"device.example.com\")\nsample_authorization = tailscale.DeviceAuthorization(\"sample_authorization\",\n    device_id=sample_device.id,\n    authorized=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDevice = Tailscale.GetDevice.Invoke(new()\n    {\n        Name = \"device.example.com\",\n    });\n\n    var sampleAuthorization = new Tailscale.DeviceAuthorization(\"sample_authorization\", new()\n    {\n        DeviceId = sampleDevice.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n        Authorized = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsampleDevice, err := tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"device.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewDeviceAuthorization(ctx, \"sample_authorization\", \u0026tailscale.DeviceAuthorizationArgs{\n\t\t\tDeviceId:   pulumi.String(sampleDevice.Id),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDeviceArgs;\nimport com.pulumi.tailscale.DeviceAuthorization;\nimport com.pulumi.tailscale.DeviceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleDevice = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"device.example.com\")\n            .build());\n\n        var sampleAuthorization = new DeviceAuthorization(\"sampleAuthorization\", DeviceAuthorizationArgs.builder()        \n            .deviceId(sampleDevice.applyValue(getDeviceResult -\u003e getDeviceResult.id()))\n            .authorized(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleAuthorization:\n    type: tailscale:DeviceAuthorization\n    name: sample_authorization\n    properties:\n      deviceId: ${sampleDevice.id}\n      authorized: true\nvariables:\n  sampleDevice:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        name: device.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Whether or not the device is authorized\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "The device to set as authorized\n"
                }
            },
            "required": [
                "authorized",
                "deviceId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Whether or not the device is authorized\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "The device to set as authorized\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Whether or not the device is authorized\n"
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "The device to set as authorized\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/deviceKey:DeviceKey": {
            "description": "The device_key resource allows you to update the properties of a device's key\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst exampleDevice = tailscale.getDevice({\n    name: \"device.example.com\",\n});\nconst exampleKey = new tailscale.DeviceKey(\"example_key\", {\n    deviceId: exampleDevice.then(exampleDevice =\u003e exampleDevice.id),\n    keyExpiryDisabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nexample_device = tailscale.get_device(name=\"device.example.com\")\nexample_key = tailscale.DeviceKey(\"example_key\",\n    device_id=example_device.id,\n    key_expiry_disabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDevice = Tailscale.GetDevice.Invoke(new()\n    {\n        Name = \"device.example.com\",\n    });\n\n    var exampleKey = new Tailscale.DeviceKey(\"example_key\", new()\n    {\n        DeviceId = exampleDevice.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n        KeyExpiryDisabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDevice, err := tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"device.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewDeviceKey(ctx, \"example_key\", \u0026tailscale.DeviceKeyArgs{\n\t\t\tDeviceId:          pulumi.String(exampleDevice.Id),\n\t\t\tKeyExpiryDisabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDeviceArgs;\nimport com.pulumi.tailscale.DeviceKey;\nimport com.pulumi.tailscale.DeviceKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleDevice = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"device.example.com\")\n            .build());\n\n        var exampleKey = new DeviceKey(\"exampleKey\", DeviceKeyArgs.builder()        \n            .deviceId(exampleDevice.applyValue(getDeviceResult -\u003e getDeviceResult.id()))\n            .keyExpiryDisabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleKey:\n    type: tailscale:DeviceKey\n    name: example_key\n    properties:\n      deviceId: ${exampleDevice.id}\n      keyExpiryDisabled: true\nvariables:\n  exampleDevice:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        name: device.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to update the key properties of\n"
                },
                "keyExpiryDisabled": {
                    "type": "boolean",
                    "description": "Determines whether or not the device's key will expire. Defaults to `false`.\n"
                }
            },
            "required": [
                "deviceId"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to update the key properties of\n"
                },
                "keyExpiryDisabled": {
                    "type": "boolean",
                    "description": "Determines whether or not the device's key will expire. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceKey resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device to update the key properties of\n"
                    },
                    "keyExpiryDisabled": {
                        "type": "boolean",
                        "description": "Determines whether or not the device's key will expire. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/deviceSubnetRoutes:DeviceSubnetRoutes": {
            "description": "The device_subnet_routes resource allows you to configure subnet routes for your Tailscale devices. See https://tailscale.com/kb/1019/subnets for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleDevice = tailscale.getDevice({\n    name: \"device.example.com\",\n});\nconst sampleRoutes = new tailscale.DeviceSubnetRoutes(\"sample_routes\", {\n    deviceId: sampleDevice.then(sampleDevice =\u003e sampleDevice.id),\n    routes: [\n        \"10.0.1.0/24\",\n        \"1.2.0.0/16\",\n        \"2.0.0.0/24\",\n    ],\n});\nconst sampleExitNode = new tailscale.DeviceSubnetRoutes(\"sample_exit_node\", {\n    deviceId: sampleDevice.then(sampleDevice =\u003e sampleDevice.id),\n    routes: [\n        \"0.0.0.0/0\",\n        \"::/0\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_device = tailscale.get_device(name=\"device.example.com\")\nsample_routes = tailscale.DeviceSubnetRoutes(\"sample_routes\",\n    device_id=sample_device.id,\n    routes=[\n        \"10.0.1.0/24\",\n        \"1.2.0.0/16\",\n        \"2.0.0.0/24\",\n    ])\nsample_exit_node = tailscale.DeviceSubnetRoutes(\"sample_exit_node\",\n    device_id=sample_device.id,\n    routes=[\n        \"0.0.0.0/0\",\n        \"::/0\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDevice = Tailscale.GetDevice.Invoke(new()\n    {\n        Name = \"device.example.com\",\n    });\n\n    var sampleRoutes = new Tailscale.DeviceSubnetRoutes(\"sample_routes\", new()\n    {\n        DeviceId = sampleDevice.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n        Routes = new[]\n        {\n            \"10.0.1.0/24\",\n            \"1.2.0.0/16\",\n            \"2.0.0.0/24\",\n        },\n    });\n\n    var sampleExitNode = new Tailscale.DeviceSubnetRoutes(\"sample_exit_node\", new()\n    {\n        DeviceId = sampleDevice.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n        Routes = new[]\n        {\n            \"0.0.0.0/0\",\n            \"::/0\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsampleDevice, err := tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"device.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewDeviceSubnetRoutes(ctx, \"sample_routes\", \u0026tailscale.DeviceSubnetRoutesArgs{\n\t\t\tDeviceId: pulumi.String(sampleDevice.Id),\n\t\t\tRoutes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\tpulumi.String(\"1.2.0.0/16\"),\n\t\t\t\tpulumi.String(\"2.0.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewDeviceSubnetRoutes(ctx, \"sample_exit_node\", \u0026tailscale.DeviceSubnetRoutesArgs{\n\t\t\tDeviceId: pulumi.String(sampleDevice.Id),\n\t\t\tRoutes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDeviceArgs;\nimport com.pulumi.tailscale.DeviceSubnetRoutes;\nimport com.pulumi.tailscale.DeviceSubnetRoutesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleDevice = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"device.example.com\")\n            .build());\n\n        var sampleRoutes = new DeviceSubnetRoutes(\"sampleRoutes\", DeviceSubnetRoutesArgs.builder()        \n            .deviceId(sampleDevice.applyValue(getDeviceResult -\u003e getDeviceResult.id()))\n            .routes(            \n                \"10.0.1.0/24\",\n                \"1.2.0.0/16\",\n                \"2.0.0.0/24\")\n            .build());\n\n        var sampleExitNode = new DeviceSubnetRoutes(\"sampleExitNode\", DeviceSubnetRoutesArgs.builder()        \n            .deviceId(sampleDevice.applyValue(getDeviceResult -\u003e getDeviceResult.id()))\n            .routes(            \n                \"0.0.0.0/0\",\n                \"::/0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleRoutes:\n    type: tailscale:DeviceSubnetRoutes\n    name: sample_routes\n    properties:\n      deviceId: ${sampleDevice.id}\n      routes:\n        - 10.0.1.0/24\n        - 1.2.0.0/16\n        - 2.0.0.0/24\n  sampleExitNode:\n    type: tailscale:DeviceSubnetRoutes\n    name: sample_exit_node\n    properties:\n      deviceId: ${sampleDevice.id}\n      routes:\n        - 0.0.0.0/0\n        - ::/0\nvariables:\n  sampleDevice:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        name: device.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to set subnet routes for\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet routes that are enabled to be routed by a device\n"
                }
            },
            "required": [
                "deviceId",
                "routes"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to set subnet routes for\n"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet routes that are enabled to be routed by a device\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "routes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceSubnetRoutes resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device to set subnet routes for\n"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The subnet routes that are enabled to be routed by a device\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/deviceTags:DeviceTags": {
            "description": "The device_tags resource is used to apply tags to Tailscale devices. See https://tailscale.com/kb/1068/acl-tags/ for more details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleDevice = tailscale.getDevice({\n    name: \"device.example.com\",\n});\nconst sampleTags = new tailscale.DeviceTags(\"sample_tags\", {\n    deviceId: sampleDevice.then(sampleDevice =\u003e sampleDevice.id),\n    tags: [\"room:bedroom\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_device = tailscale.get_device(name=\"device.example.com\")\nsample_tags = tailscale.DeviceTags(\"sample_tags\",\n    device_id=sample_device.id,\n    tags=[\"room:bedroom\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDevice = Tailscale.GetDevice.Invoke(new()\n    {\n        Name = \"device.example.com\",\n    });\n\n    var sampleTags = new Tailscale.DeviceTags(\"sample_tags\", new()\n    {\n        DeviceId = sampleDevice.Apply(getDeviceResult =\u003e getDeviceResult.Id),\n        Tags = new[]\n        {\n            \"room:bedroom\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsampleDevice, err := tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tName: pulumi.StringRef(\"device.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.NewDeviceTags(ctx, \"sample_tags\", \u0026tailscale.DeviceTagsArgs{\n\t\t\tDeviceId: pulumi.String(sampleDevice.Id),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"room:bedroom\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDeviceArgs;\nimport com.pulumi.tailscale.DeviceTags;\nimport com.pulumi.tailscale.DeviceTagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleDevice = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"device.example.com\")\n            .build());\n\n        var sampleTags = new DeviceTags(\"sampleTags\", DeviceTagsArgs.builder()        \n            .deviceId(sampleDevice.applyValue(getDeviceResult -\u003e getDeviceResult.id()))\n            .tags(\"room:bedroom\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleTags:\n    type: tailscale:DeviceTags\n    name: sample_tags\n    properties:\n      deviceId: ${sampleDevice.id}\n      tags:\n        - room:bedroom\nvariables:\n  sampleDevice:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        name: device.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to set tags for\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to apply to the device\n"
                }
            },
            "required": [
                "deviceId",
                "tags"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device to set tags for\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to apply to the device\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceTags resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "The device to set tags for\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to apply to the device\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/dnsNameservers:DnsNameservers": {
            "description": "The dns_nameservers resource allows you to configure DNS nameservers for your Tailscale network. See https://tailscale.com/kb/1054/dns for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleNameservers = new tailscale.DnsNameservers(\"sample_nameservers\", {nameservers: [\n    \"8.8.8.8\",\n    \"8.8.4.4\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_nameservers = tailscale.DnsNameservers(\"sample_nameservers\", nameservers=[\n    \"8.8.8.8\",\n    \"8.8.4.4\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleNameservers = new Tailscale.DnsNameservers(\"sample_nameservers\", new()\n    {\n        Nameservers = new[]\n        {\n            \"8.8.8.8\",\n            \"8.8.4.4\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.NewDnsNameservers(ctx, \"sample_nameservers\", \u0026tailscale.DnsNameserversArgs{\n\t\t\tNameservers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"8.8.4.4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.DnsNameservers;\nimport com.pulumi.tailscale.DnsNameserversArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleNameservers = new DnsNameservers(\"sampleNameservers\", DnsNameserversArgs.builder()        \n            .nameservers(            \n                \"8.8.8.8\",\n                \"8.8.4.4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleNameservers:\n    type: tailscale:DnsNameservers\n    name: sample_nameservers\n    properties:\n      nameservers:\n        - 8.8.8.8\n        - 8.8.4.4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                }
            },
            "required": [
                "nameservers"
            ],
            "inputProperties": {
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                }
            },
            "requiredInputs": [
                "nameservers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsNameservers resources.\n",
                "properties": {
                    "nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/dnsPreferences:DnsPreferences": {
            "description": "The dns_preferences resource allows you to configure DNS preferences for your Tailscale network. See https://tailscale.com/kb/1054/dns for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst samplePreferences = new tailscale.DnsPreferences(\"sample_preferences\", {magicDns: true});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_preferences = tailscale.DnsPreferences(\"sample_preferences\", magic_dns=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var samplePreferences = new Tailscale.DnsPreferences(\"sample_preferences\", new()\n    {\n        MagicDns = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.NewDnsPreferences(ctx, \"sample_preferences\", \u0026tailscale.DnsPreferencesArgs{\n\t\t\tMagicDns: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.DnsPreferences;\nimport com.pulumi.tailscale.DnsPreferencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var samplePreferences = new DnsPreferences(\"samplePreferences\", DnsPreferencesArgs.builder()        \n            .magicDns(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  samplePreferences:\n    type: tailscale:DnsPreferences\n    name: sample_preferences\n    properties:\n      magicDns: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nID doesn't matter.\n\n```sh\n$ pulumi import tailscale:index/dnsPreferences:DnsPreferences sample_preferences dns_preferences\n```\n\n",
            "properties": {
                "magicDns": {
                    "type": "boolean",
                    "description": "Whether or not to enable magic DNS\n"
                }
            },
            "required": [
                "magicDns"
            ],
            "inputProperties": {
                "magicDns": {
                    "type": "boolean",
                    "description": "Whether or not to enable magic DNS\n"
                }
            },
            "requiredInputs": [
                "magicDns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsPreferences resources.\n",
                "properties": {
                    "magicDns": {
                        "type": "boolean",
                        "description": "Whether or not to enable magic DNS\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/dnsSearchPaths:DnsSearchPaths": {
            "description": "The dns_nameservers resource allows you to configure DNS nameservers for your Tailscale network. See https://tailscale.com/kb/1054/dns for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleSearchPaths = new tailscale.DnsSearchPaths(\"sample_search_paths\", {searchPaths: [\"example.com\"]});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_search_paths = tailscale.DnsSearchPaths(\"sample_search_paths\", search_paths=[\"example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleSearchPaths = new Tailscale.DnsSearchPaths(\"sample_search_paths\", new()\n    {\n        SearchPaths = new[]\n        {\n            \"example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.NewDnsSearchPaths(ctx, \"sample_search_paths\", \u0026tailscale.DnsSearchPathsArgs{\n\t\t\tSearchPaths: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.DnsSearchPaths;\nimport com.pulumi.tailscale.DnsSearchPathsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleSearchPaths = new DnsSearchPaths(\"sampleSearchPaths\", DnsSearchPathsArgs.builder()        \n            .searchPaths(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleSearchPaths:\n    type: tailscale:DnsSearchPaths\n    name: sample_search_paths\n    properties:\n      searchPaths:\n        - example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these domain suffixes to resolve DNS names.\n"
                }
            },
            "required": [
                "searchPaths"
            ],
            "inputProperties": {
                "searchPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these domain suffixes to resolve DNS names.\n"
                }
            },
            "requiredInputs": [
                "searchPaths"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsSearchPaths resources.\n",
                "properties": {
                    "searchPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices on your network will use these domain suffixes to resolve DNS names.\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/dnsSplitNameservers:DnsSplitNameservers": {
            "description": "The dns_split_nameservers resource allows you to configure split DNS nameservers for your Tailscale network. See https://tailscale.com/kb/1054/dns for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleSplitNameservers = new tailscale.DnsSplitNameservers(\"sample_split_nameservers\", {\n    domain: \"foo.example.com\",\n    nameservers: [\"1.1.1.1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_split_nameservers = tailscale.DnsSplitNameservers(\"sample_split_nameservers\",\n    domain=\"foo.example.com\",\n    nameservers=[\"1.1.1.1\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleSplitNameservers = new Tailscale.DnsSplitNameservers(\"sample_split_nameservers\", new()\n    {\n        Domain = \"foo.example.com\",\n        Nameservers = new[]\n        {\n            \"1.1.1.1\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.NewDnsSplitNameservers(ctx, \"sample_split_nameservers\", \u0026tailscale.DnsSplitNameserversArgs{\n\t\t\tDomain: pulumi.String(\"foo.example.com\"),\n\t\t\tNameservers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"1.1.1.1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.DnsSplitNameservers;\nimport com.pulumi.tailscale.DnsSplitNameserversArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleSplitNameservers = new DnsSplitNameservers(\"sampleSplitNameservers\", DnsSplitNameserversArgs.builder()        \n            .domain(\"foo.example.com\")\n            .nameservers(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleSplitNameservers:\n    type: tailscale:DnsSplitNameservers\n    name: sample_split_nameservers\n    properties:\n      domain: foo.example.com\n      nameservers:\n        - 1.1.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSplit DNS nameservers can be imported using the domain name, e.g.\n\n```sh\n$ pulumi import tailscale:index/dnsSplitNameservers:DnsSplitNameservers sample_split_nameservers example.com\n```\n\n",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.\n"
                },
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                }
            },
            "required": [
                "domain",
                "nameservers"
            ],
            "inputProperties": {
                "domain": {
                    "type": "string",
                    "description": "Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.\n"
                },
                "nameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                }
            },
            "requiredInputs": [
                "domain",
                "nameservers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsSplitNameservers resources.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.\n"
                    },
                    "nameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.\n"
                    }
                },
                "type": "object"
            }
        },
        "tailscale:index/tailnetKey:TailnetKey": {
            "description": "The tailnet_key resource allows you to create pre-authentication keys that can register new nodes without needing to sign in via a web browser. See https://tailscale.com/kb/1085/auth-keys for more information\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleKey = new tailscale.TailnetKey(\"sample_key\", {\n    reusable: true,\n    ephemeral: false,\n    preauthorized: true,\n    expiry: 3600,\n    description: \"Sample key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_key = tailscale.TailnetKey(\"sample_key\",\n    reusable=True,\n    ephemeral=False,\n    preauthorized=True,\n    expiry=3600,\n    description=\"Sample key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleKey = new Tailscale.TailnetKey(\"sample_key\", new()\n    {\n        Reusable = true,\n        Ephemeral = false,\n        Preauthorized = true,\n        Expiry = 3600,\n        Description = \"Sample key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.NewTailnetKey(ctx, \"sample_key\", \u0026tailscale.TailnetKeyArgs{\n\t\t\tReusable:      pulumi.Bool(true),\n\t\t\tEphemeral:     pulumi.Bool(false),\n\t\t\tPreauthorized: pulumi.Bool(true),\n\t\t\tExpiry:        pulumi.Int(3600),\n\t\t\tDescription:   pulumi.String(\"Sample key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailnetKey;\nimport com.pulumi.tailscale.TailnetKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sampleKey = new TailnetKey(\"sampleKey\", TailnetKeyArgs.builder()        \n            .reusable(true)\n            .ephemeral(false)\n            .preauthorized(true)\n            .expiry(3600)\n            .description(\"Sample key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sampleKey:\n    type: tailscale:TailnetKey\n    name: sample_key\n    properties:\n      reusable: true\n      ephemeral: false\n      preauthorized: true\n      expiry: 3600\n      description: Sample key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation timestamp of the key in RFC3339 format\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the key consisting of alphanumeric characters. Defaults to `\"\"`.\n"
                },
                "ephemeral": {
                    "type": "boolean",
                    "description": "Indicates if the key is ephemeral. Defaults to `false`.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The expiry timestamp of the key in RFC3339 format\n"
                },
                "expiry": {
                    "type": "integer",
                    "description": "The expiry of the key in seconds. Defaults to `7776000` (90 days).\n"
                },
                "invalid": {
                    "type": "boolean",
                    "description": "Indicates whether the key is invalid (e.g. expired, revoked or has been deleted).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The authentication key\n",
                    "secret": true
                },
                "preauthorized": {
                    "type": "boolean",
                    "description": "Determines whether or not the machines authenticated by the key will be authorized for the tailnet by default. Defaults to `false`.\n"
                },
                "recreateIfInvalid": {
                    "type": "string",
                    "description": "Determines whether the key should be created again if it becomes invalid. By default, reusable keys will be recreated, but single-use keys will not. Possible values: 'always', 'never'.\n"
                },
                "reusable": {
                    "type": "boolean",
                    "description": "Indicates if the key is reusable or single-use. Defaults to `false`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags to apply to the machines authenticated by the key.\n"
                }
            },
            "required": [
                "createdAt",
                "expiresAt",
                "invalid",
                "key"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the key consisting of alphanumeric characters. Defaults to `\"\"`.\n",
                    "willReplaceOnChanges": true
                },
                "ephemeral": {
                    "type": "boolean",
                    "description": "Indicates if the key is ephemeral. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "expiry": {
                    "type": "integer",
                    "description": "The expiry of the key in seconds. Defaults to `7776000` (90 days).\n",
                    "willReplaceOnChanges": true
                },
                "preauthorized": {
                    "type": "boolean",
                    "description": "Determines whether or not the machines authenticated by the key will be authorized for the tailnet by default. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "recreateIfInvalid": {
                    "type": "string",
                    "description": "Determines whether the key should be created again if it becomes invalid. By default, reusable keys will be recreated, but single-use keys will not. Possible values: 'always', 'never'.\n"
                },
                "reusable": {
                    "type": "boolean",
                    "description": "Indicates if the key is reusable or single-use. Defaults to `false`.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tags to apply to the machines authenticated by the key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TailnetKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation timestamp of the key in RFC3339 format\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the key consisting of alphanumeric characters. Defaults to `\"\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "ephemeral": {
                        "type": "boolean",
                        "description": "Indicates if the key is ephemeral. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "The expiry timestamp of the key in RFC3339 format\n"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The expiry of the key in seconds. Defaults to `7776000` (90 days).\n",
                        "willReplaceOnChanges": true
                    },
                    "invalid": {
                        "type": "boolean",
                        "description": "Indicates whether the key is invalid (e.g. expired, revoked or has been deleted).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The authentication key\n",
                        "secret": true
                    },
                    "preauthorized": {
                        "type": "boolean",
                        "description": "Determines whether or not the machines authenticated by the key will be authorized for the tailnet by default. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "recreateIfInvalid": {
                        "type": "string",
                        "description": "Determines whether the key should be created again if it becomes invalid. By default, reusable keys will be recreated, but single-use keys will not. Possible values: 'always', 'never'.\n"
                    },
                    "reusable": {
                        "type": "boolean",
                        "description": "Indicates if the key is reusable or single-use. Defaults to `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags to apply to the machines authenticated by the key.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "tailscale:index/get4Via6:get4Via6": {
            "description": "The 4via6 data source is calculates an IPv6 prefix for a given site ID and IPv4 CIDR. See Tailscale documentation for [4via6 subnets](https://tailscale.com/kb/1201/4via6-subnets/) for more details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst example = tailscale.get4Via6({\n    site: 7,\n    cidr: \"10.1.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nexample = tailscale.get4_via6(site=7,\n    cidr=\"10.1.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Tailscale.Get4Via6.Invoke(new()\n    {\n        Site = 7,\n        Cidr = \"10.1.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.Get4Via6(ctx, \u0026tailscale.Get4Via6Args{\n\t\t\tSite: 7,\n\t\t\tCidr: \"10.1.1.0/24\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.Get4Via6Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TailscaleFunctions.get4Via6(Get4Via6Args.builder()\n            .site(7)\n            .cidr(\"10.1.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: tailscale:get4Via6\n      Arguments:\n        site: 7\n        cidr: 10.1.1.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking get4Via6.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "The IPv4 CIDR to map\n"
                    },
                    "site": {
                        "type": "integer",
                        "description": "Site ID (between 0 and 65535)\n"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "site"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by get4Via6.\n",
                "properties": {
                    "cidr": {
                        "description": "The IPv4 CIDR to map\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipv6": {
                        "description": "The 4via6 mapped address\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "Site ID (between 0 and 65535)\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "cidr",
                    "ipv6",
                    "site",
                    "id"
                ],
                "type": "object"
            }
        },
        "tailscale:index/getAcl:getAcl": {
            "description": "The acl data source gets the Tailscale ACL for a tailnet\n",
            "outputs": {
                "description": "A collection of values returned by getAcl.\n",
                "properties": {
                    "hujson": {
                        "description": "The contents of Tailscale ACL as a HuJSON string\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "json": {
                        "description": "The contents of Tailscale ACL as a JSON string\n",
                        "type": "string"
                    }
                },
                "required": [
                    "hujson",
                    "json",
                    "id"
                ],
                "type": "object"
            }
        },
        "tailscale:index/getDevice:getDevice": {
            "description": "The device data source describes a single device in a tailnet\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleDevice = tailscale.getDevice({\n    name: \"device1.example.ts.net\",\n    waitFor: \"60s\",\n});\nconst sampleDevice2 = tailscale.getDevice({\n    hostname: \"device2\",\n    waitFor: \"60s\",\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_device = tailscale.get_device(name=\"device1.example.ts.net\",\n    wait_for=\"60s\")\nsample_device2 = tailscale.get_device(hostname=\"device2\",\n    wait_for=\"60s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDevice = Tailscale.GetDevice.Invoke(new()\n    {\n        Name = \"device1.example.ts.net\",\n        WaitFor = \"60s\",\n    });\n\n    var sampleDevice2 = Tailscale.GetDevice.Invoke(new()\n    {\n        Hostname = \"device2\",\n        WaitFor = \"60s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tName:    pulumi.StringRef(\"device1.example.ts.net\"),\n\t\t\tWaitFor: pulumi.StringRef(\"60s\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tailscale.GetDevice(ctx, \u0026tailscale.GetDeviceArgs{\n\t\t\tHostname: pulumi.StringRef(\"device2\"),\n\t\t\tWaitFor:  pulumi.StringRef(\"60s\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleDevice = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .name(\"device1.example.ts.net\")\n            .waitFor(\"60s\")\n            .build());\n\n        final var sampleDevice2 = TailscaleFunctions.getDevice(GetDeviceArgs.builder()\n            .hostname(\"device2\")\n            .waitFor(\"60s\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleDevice:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        name: device1.example.ts.net\n        waitFor: 60s\n  sampleDevice2:\n    fn::invoke:\n      Function: tailscale:getDevice\n      Arguments:\n        hostname: device2\n        waitFor: 60s\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevice.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The short hostname of the device\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The full name of the device (e.g. `hostname.domain.ts.net`)\n"
                    },
                    "waitFor": {
                        "type": "string",
                        "description": "If specified, the provider will make multiple attempts to obtain the data source until the wait_for duration is reached. Retries are made every second so this value should be greater than 1s\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevice.\n",
                "properties": {
                    "addresses": {
                        "description": "The list of device's IPs\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "hostname": {
                        "description": "The short hostname of the device\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The full name of the device (e.g. `hostname.domain.ts.net`)\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags applied to the device\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "user": {
                        "description": "The user associated with the device\n",
                        "type": "string"
                    },
                    "waitFor": {
                        "description": "If specified, the provider will make multiple attempts to obtain the data source until the wait_for duration is reached. Retries are made every second so this value should be greater than 1s\n",
                        "type": "string"
                    }
                },
                "required": [
                    "addresses",
                    "tags",
                    "user",
                    "id"
                ],
                "type": "object"
            }
        },
        "tailscale:index/getDevices:getDevices": {
            "description": "The devices data source describes a list of devices in a tailnet\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as tailscale from \"@pulumi/tailscale\";\n\nconst sampleDevices = tailscale.getDevices({\n    namePrefix: \"example-\",\n});\n```\n```python\nimport pulumi\nimport pulumi_tailscale as tailscale\n\nsample_devices = tailscale.get_devices(name_prefix=\"example-\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Tailscale = Pulumi.Tailscale;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleDevices = Tailscale.GetDevices.Invoke(new()\n    {\n        NamePrefix = \"example-\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tailscale.GetDevices(ctx, \u0026tailscale.GetDevicesArgs{\n\t\t\tNamePrefix: pulumi.StringRef(\"example-\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tailscale.TailscaleFunctions;\nimport com.pulumi.tailscale.inputs.GetDevicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleDevices = TailscaleFunctions.getDevices(GetDevicesArgs.builder()\n            .namePrefix(\"example-\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleDevices:\n    fn::invoke:\n      Function: tailscale:getDevices\n      Arguments:\n        namePrefix: example-\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevices.\n",
                "properties": {
                    "namePrefix": {
                        "type": "string",
                        "description": "Filters the device list to elements whose name has the provided prefix\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevices.\n",
                "properties": {
                    "devices": {
                        "description": "The list of devices in the tailnet\n",
                        "items": {
                            "$ref": "#/types/tailscale:index/getDevicesDevice:getDevicesDevice"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "namePrefix": {
                        "description": "Filters the device list to elements whose name has the provided prefix\n",
                        "type": "string"
                    }
                },
                "required": [
                    "devices",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}