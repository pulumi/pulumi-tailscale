// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The dnsSplitNameservers resource allows you to configure split DNS nameservers for your Tailscale network. See https://tailscale.com/kb/1054/dns for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tailscale from "@pulumi/tailscale";
 *
 * const sampleSplitNameservers = new tailscale.DnsSplitNameservers("sample_split_nameservers", {
 *     domain: "foo.example.com",
 *     nameservers: ["1.1.1.1"],
 * });
 * ```
 *
 * ## Import
 *
 * Split DNS nameservers can be imported using the domain name, e.g.
 *
 * ```sh
 * $ pulumi import tailscale:index/dnsSplitNameservers:DnsSplitNameservers sample_split_nameservers example.com
 * ```
 */
export class DnsSplitNameservers extends pulumi.CustomResource {
    /**
     * Get an existing DnsSplitNameservers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsSplitNameserversState, opts?: pulumi.CustomResourceOptions): DnsSplitNameservers {
        return new DnsSplitNameservers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tailscale:index/dnsSplitNameservers:DnsSplitNameservers';

    /**
     * Returns true if the given object is an instance of DnsSplitNameservers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsSplitNameservers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsSplitNameservers.__pulumiType;
    }

    /**
     * Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
     */
    public readonly nameservers!: pulumi.Output<string[]>;

    /**
     * Create a DnsSplitNameservers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsSplitNameserversArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsSplitNameserversArgs | DnsSplitNameserversState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsSplitNameserversState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["nameservers"] = state ? state.nameservers : undefined;
        } else {
            const args = argsOrState as DnsSplitNameserversArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.nameservers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameservers'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["nameservers"] = args ? args.nameservers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsSplitNameservers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsSplitNameservers resources.
 */
export interface DnsSplitNameserversState {
    /**
     * Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
     */
    domain?: pulumi.Input<string>;
    /**
     * Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
     */
    nameservers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DnsSplitNameservers resource.
 */
export interface DnsSplitNameserversArgs {
    /**
     * Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
     */
    domain: pulumi.Input<string>;
    /**
     * Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
     */
    nameservers: pulumi.Input<pulumi.Input<string>[]>;
}
