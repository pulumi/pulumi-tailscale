// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { ContactsArgs, ContactsState } from "./contacts";
export type Contacts = import("./contacts").Contacts;
export const Contacts: typeof import("./contacts").Contacts = null as any;
utilities.lazyLoad(exports, ["Contacts"], () => require("./contacts"));

export { DeviceAuthorizationArgs, DeviceAuthorizationState } from "./deviceAuthorization";
export type DeviceAuthorization = import("./deviceAuthorization").DeviceAuthorization;
export const DeviceAuthorization: typeof import("./deviceAuthorization").DeviceAuthorization = null as any;
utilities.lazyLoad(exports, ["DeviceAuthorization"], () => require("./deviceAuthorization"));

export { DeviceKeyArgs, DeviceKeyState } from "./deviceKey";
export type DeviceKey = import("./deviceKey").DeviceKey;
export const DeviceKey: typeof import("./deviceKey").DeviceKey = null as any;
utilities.lazyLoad(exports, ["DeviceKey"], () => require("./deviceKey"));

export { DeviceSubnetRoutesArgs, DeviceSubnetRoutesState } from "./deviceSubnetRoutes";
export type DeviceSubnetRoutes = import("./deviceSubnetRoutes").DeviceSubnetRoutes;
export const DeviceSubnetRoutes: typeof import("./deviceSubnetRoutes").DeviceSubnetRoutes = null as any;
utilities.lazyLoad(exports, ["DeviceSubnetRoutes"], () => require("./deviceSubnetRoutes"));

export { DeviceTagsArgs, DeviceTagsState } from "./deviceTags";
export type DeviceTags = import("./deviceTags").DeviceTags;
export const DeviceTags: typeof import("./deviceTags").DeviceTags = null as any;
utilities.lazyLoad(exports, ["DeviceTags"], () => require("./deviceTags"));

export { DnsNameserversArgs, DnsNameserversState } from "./dnsNameservers";
export type DnsNameservers = import("./dnsNameservers").DnsNameservers;
export const DnsNameservers: typeof import("./dnsNameservers").DnsNameservers = null as any;
utilities.lazyLoad(exports, ["DnsNameservers"], () => require("./dnsNameservers"));

export { DnsPreferencesArgs, DnsPreferencesState } from "./dnsPreferences";
export type DnsPreferences = import("./dnsPreferences").DnsPreferences;
export const DnsPreferences: typeof import("./dnsPreferences").DnsPreferences = null as any;
utilities.lazyLoad(exports, ["DnsPreferences"], () => require("./dnsPreferences"));

export { DnsSearchPathsArgs, DnsSearchPathsState } from "./dnsSearchPaths";
export type DnsSearchPaths = import("./dnsSearchPaths").DnsSearchPaths;
export const DnsSearchPaths: typeof import("./dnsSearchPaths").DnsSearchPaths = null as any;
utilities.lazyLoad(exports, ["DnsSearchPaths"], () => require("./dnsSearchPaths"));

export { DnsSplitNameserversArgs, DnsSplitNameserversState } from "./dnsSplitNameservers";
export type DnsSplitNameservers = import("./dnsSplitNameservers").DnsSplitNameservers;
export const DnsSplitNameservers: typeof import("./dnsSplitNameservers").DnsSplitNameservers = null as any;
utilities.lazyLoad(exports, ["DnsSplitNameservers"], () => require("./dnsSplitNameservers"));

export { Get4Via6Args, Get4Via6Result, Get4Via6OutputArgs } from "./get4Via6";
export const get4Via6: typeof import("./get4Via6").get4Via6 = null as any;
export const get4Via6Output: typeof import("./get4Via6").get4Via6Output = null as any;
utilities.lazyLoad(exports, ["get4Via6","get4Via6Output"], () => require("./get4Via6"));

export { GetAclResult } from "./getAcl";
export const getAcl: typeof import("./getAcl").getAcl = null as any;
export const getAclOutput: typeof import("./getAcl").getAclOutput = null as any;
utilities.lazyLoad(exports, ["getAcl","getAclOutput"], () => require("./getAcl"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { LogstreamConfigurationArgs, LogstreamConfigurationState } from "./logstreamConfiguration";
export type LogstreamConfiguration = import("./logstreamConfiguration").LogstreamConfiguration;
export const LogstreamConfiguration: typeof import("./logstreamConfiguration").LogstreamConfiguration = null as any;
utilities.lazyLoad(exports, ["LogstreamConfiguration"], () => require("./logstreamConfiguration"));

export { PostureIntegrationArgs, PostureIntegrationState } from "./postureIntegration";
export type PostureIntegration = import("./postureIntegration").PostureIntegration;
export const PostureIntegration: typeof import("./postureIntegration").PostureIntegration = null as any;
utilities.lazyLoad(exports, ["PostureIntegration"], () => require("./postureIntegration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TailnetKeyArgs, TailnetKeyState } from "./tailnetKey";
export type TailnetKey = import("./tailnetKey").TailnetKey;
export const TailnetKey: typeof import("./tailnetKey").TailnetKey = null as any;
utilities.lazyLoad(exports, ["TailnetKey"], () => require("./tailnetKey"));

export { TailnetSettingsArgs, TailnetSettingsState } from "./tailnetSettings";
export type TailnetSettings = import("./tailnetSettings").TailnetSettings;
export const TailnetSettings: typeof import("./tailnetSettings").TailnetSettings = null as any;
utilities.lazyLoad(exports, ["TailnetSettings"], () => require("./tailnetSettings"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tailscale:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "tailscale:index/contacts:Contacts":
                return new Contacts(name, <any>undefined, { urn })
            case "tailscale:index/deviceAuthorization:DeviceAuthorization":
                return new DeviceAuthorization(name, <any>undefined, { urn })
            case "tailscale:index/deviceKey:DeviceKey":
                return new DeviceKey(name, <any>undefined, { urn })
            case "tailscale:index/deviceSubnetRoutes:DeviceSubnetRoutes":
                return new DeviceSubnetRoutes(name, <any>undefined, { urn })
            case "tailscale:index/deviceTags:DeviceTags":
                return new DeviceTags(name, <any>undefined, { urn })
            case "tailscale:index/dnsNameservers:DnsNameservers":
                return new DnsNameservers(name, <any>undefined, { urn })
            case "tailscale:index/dnsPreferences:DnsPreferences":
                return new DnsPreferences(name, <any>undefined, { urn })
            case "tailscale:index/dnsSearchPaths:DnsSearchPaths":
                return new DnsSearchPaths(name, <any>undefined, { urn })
            case "tailscale:index/dnsSplitNameservers:DnsSplitNameservers":
                return new DnsSplitNameservers(name, <any>undefined, { urn })
            case "tailscale:index/logstreamConfiguration:LogstreamConfiguration":
                return new LogstreamConfiguration(name, <any>undefined, { urn })
            case "tailscale:index/postureIntegration:PostureIntegration":
                return new PostureIntegration(name, <any>undefined, { urn })
            case "tailscale:index/tailnetKey:TailnetKey":
                return new TailnetKey(name, <any>undefined, { urn })
            case "tailscale:index/tailnetSettings:TailnetSettings":
                return new TailnetSettings(name, <any>undefined, { urn })
            case "tailscale:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tailscale", "index/acl", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/contacts", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/deviceAuthorization", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/deviceKey", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/deviceSubnetRoutes", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/deviceTags", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/dnsNameservers", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/dnsPreferences", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/dnsSearchPaths", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/dnsSplitNameservers", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/logstreamConfiguration", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/postureIntegration", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/tailnetKey", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/tailnetSettings", _module)
pulumi.runtime.registerResourceModule("tailscale", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("tailscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tailscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
