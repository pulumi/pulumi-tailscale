// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The acl resource allows you to configure a Tailscale ACL. See https://tailscale.com/kb/1018/acls for more information. Note that this resource will completely overwrite existing ACL contents for a given tailnet.
 *
 * If tests are defined in the ACL (the top-level "tests" section), ACL validation will occur before creation and update operations are applied.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tailscale from "@pulumi/tailscale";
 *
 * const asJson = new tailscale.Acl("as_json", {acl: JSON.stringify({
 *     acls: [{
 *         action: "accept",
 *         users: ["*"],
 *         ports: ["*:*"],
 *     }],
 * })});
 * const asHujson = new tailscale.Acl("as_hujson", {acl: `  {
 *     // Comments in HuJSON policy are preserved when the policy is applied.
 *     "acls": [
 *       {
 *         // Allow all users access to all ports.
 *         action = "accept",
 *         users  = ["*"],
 *         ports  = ["*:*"],
 *       },
 *     ],
 *   }
 * `});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ID doesn't matter.
 *
 * ```sh
 * $ pulumi import tailscale:index/acl:Acl sample_acl acl
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tailscale:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
     */
    public readonly acl!: pulumi.Output<string>;
    /**
     * If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
     */
    public readonly overwriteExistingContent!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["overwriteExistingContent"] = state ? state.overwriteExistingContent : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.acl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acl'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["overwriteExistingContent"] = args ? args.overwriteExistingContent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
     */
    acl?: pulumi.Input<string>;
    /**
     * If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
     */
    overwriteExistingContent?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
     */
    acl: pulumi.Input<string>;
    /**
     * If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
     */
    overwriteExistingContent?: pulumi.Input<boolean>;
}
