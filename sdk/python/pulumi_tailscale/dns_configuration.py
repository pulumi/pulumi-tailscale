# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsConfigurationArgs', 'DnsConfiguration']

@pulumi.input_type
class DnsConfigurationArgs:
    def __init__(__self__, *,
                 magic_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]] = None,
                 override_local_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]] = None):
        """
        The set of arguments for constructing a DnsConfiguration resource.
        :param pulumi.Input[_builtins.bool] magic_dns: Whether or not to enable MagicDNS. Defaults to true.
        :param pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]] nameservers: Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        :param pulumi.Input[_builtins.bool] override_local_dns: When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] search_paths: Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        :param pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]] split_dns: Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        if magic_dns is not None:
            pulumi.set(__self__, "magic_dns", magic_dns)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if override_local_dns is not None:
            pulumi.set(__self__, "override_local_dns", override_local_dns)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if split_dns is not None:
            pulumi.set(__self__, "split_dns", split_dns)

    @_builtins.property
    @pulumi.getter(name="magicDns")
    def magic_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether or not to enable MagicDNS. Defaults to true.
        """
        return pulumi.get(self, "magic_dns")

    @magic_dns.setter
    def magic_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "magic_dns", value)

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]]):
        pulumi.set(self, "nameservers", value)

    @_builtins.property
    @pulumi.getter(name="overrideLocalDns")
    def override_local_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        """
        return pulumi.get(self, "override_local_dns")

    @override_local_dns.setter
    def override_local_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override_local_dns", value)

    @_builtins.property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        """
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "search_paths", value)

    @_builtins.property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        return pulumi.get(self, "split_dns")

    @split_dns.setter
    def split_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]]):
        pulumi.set(self, "split_dns", value)


@pulumi.input_type
class _DnsConfigurationState:
    def __init__(__self__, *,
                 magic_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]] = None,
                 override_local_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]] = None):
        """
        Input properties used for looking up and filtering DnsConfiguration resources.
        :param pulumi.Input[_builtins.bool] magic_dns: Whether or not to enable MagicDNS. Defaults to true.
        :param pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]] nameservers: Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        :param pulumi.Input[_builtins.bool] override_local_dns: When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] search_paths: Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        :param pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]] split_dns: Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        if magic_dns is not None:
            pulumi.set(__self__, "magic_dns", magic_dns)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if override_local_dns is not None:
            pulumi.set(__self__, "override_local_dns", override_local_dns)
        if search_paths is not None:
            pulumi.set(__self__, "search_paths", search_paths)
        if split_dns is not None:
            pulumi.set(__self__, "split_dns", split_dns)

    @_builtins.property
    @pulumi.getter(name="magicDns")
    def magic_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether or not to enable MagicDNS. Defaults to true.
        """
        return pulumi.get(self, "magic_dns")

    @magic_dns.setter
    def magic_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "magic_dns", value)

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationNameserverArgs']]]]):
        pulumi.set(self, "nameservers", value)

    @_builtins.property
    @pulumi.getter(name="overrideLocalDns")
    def override_local_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        """
        return pulumi.get(self, "override_local_dns")

    @override_local_dns.setter
    def override_local_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override_local_dns", value)

    @_builtins.property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        """
        return pulumi.get(self, "search_paths")

    @search_paths.setter
    def search_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "search_paths", value)

    @_builtins.property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        return pulumi.get(self, "split_dns")

    @split_dns.setter
    def split_dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsConfigurationSplitDnArgs']]]]):
        pulumi.set(self, "split_dns", value)


@pulumi.type_token("tailscale:index/dnsConfiguration:DnsConfiguration")
class DnsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 magic_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationNameserverArgs', 'DnsConfigurationNameserverArgsDict']]]]] = None,
                 override_local_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationSplitDnArgs', 'DnsConfigurationSplitDnArgsDict']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_tailscale as tailscale

        sample_configuration = tailscale.DnsConfiguration("sample_configuration",
            nameservers=[
                {
                    "address": "8.8.8.8",
                },
                {
                    "address": "1.1.1.1",
                    "use_with_exit_node": True,
                },
            ],
            split_dns=[
                {
                    "domain": "foo.example.com",
                    "nameservers": [
                        {
                            "address": "1.1.1.2",
                            "use_with_exit_node": True,
                        },
                        {
                            "address": "1.1.1.3",
                        },
                    ],
                },
                {
                    "domain": "bar.example.com",
                    "nameservers": [{
                        "address": "8.8.8.2",
                        "use_with_exit_node": True,
                    }],
                },
            ],
            search_paths=[
                "example.com",
                "anotherexample.com",
            ],
            override_local_dns=True,
            magic_dns=True)
        ```

        ## Import

        ID doesn't matter.

        ```sh
        $ pulumi import tailscale:index/dnsConfiguration:DnsConfiguration sample_configuration dns_configuration
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] magic_dns: Whether or not to enable MagicDNS. Defaults to true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationNameserverArgs', 'DnsConfigurationNameserverArgsDict']]]] nameservers: Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        :param pulumi.Input[_builtins.bool] override_local_dns: When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] search_paths: Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationSplitDnArgs', 'DnsConfigurationSplitDnArgsDict']]]] split_dns: Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DnsConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_tailscale as tailscale

        sample_configuration = tailscale.DnsConfiguration("sample_configuration",
            nameservers=[
                {
                    "address": "8.8.8.8",
                },
                {
                    "address": "1.1.1.1",
                    "use_with_exit_node": True,
                },
            ],
            split_dns=[
                {
                    "domain": "foo.example.com",
                    "nameservers": [
                        {
                            "address": "1.1.1.2",
                            "use_with_exit_node": True,
                        },
                        {
                            "address": "1.1.1.3",
                        },
                    ],
                },
                {
                    "domain": "bar.example.com",
                    "nameservers": [{
                        "address": "8.8.8.2",
                        "use_with_exit_node": True,
                    }],
                },
            ],
            search_paths=[
                "example.com",
                "anotherexample.com",
            ],
            override_local_dns=True,
            magic_dns=True)
        ```

        ## Import

        ID doesn't matter.

        ```sh
        $ pulumi import tailscale:index/dnsConfiguration:DnsConfiguration sample_configuration dns_configuration
        ```

        :param str resource_name: The name of the resource.
        :param DnsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 magic_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationNameserverArgs', 'DnsConfigurationNameserverArgsDict']]]]] = None,
                 override_local_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 search_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationSplitDnArgs', 'DnsConfigurationSplitDnArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsConfigurationArgs.__new__(DnsConfigurationArgs)

            __props__.__dict__["magic_dns"] = magic_dns
            __props__.__dict__["nameservers"] = nameservers
            __props__.__dict__["override_local_dns"] = override_local_dns
            __props__.__dict__["search_paths"] = search_paths
            __props__.__dict__["split_dns"] = split_dns
        super(DnsConfiguration, __self__).__init__(
            'tailscale:index/dnsConfiguration:DnsConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            magic_dns: Optional[pulumi.Input[_builtins.bool]] = None,
            nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationNameserverArgs', 'DnsConfigurationNameserverArgsDict']]]]] = None,
            override_local_dns: Optional[pulumi.Input[_builtins.bool]] = None,
            search_paths: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            split_dns: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationSplitDnArgs', 'DnsConfigurationSplitDnArgsDict']]]]] = None) -> 'DnsConfiguration':
        """
        Get an existing DnsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] magic_dns: Whether or not to enable MagicDNS. Defaults to true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationNameserverArgs', 'DnsConfigurationNameserverArgsDict']]]] nameservers: Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        :param pulumi.Input[_builtins.bool] override_local_dns: When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] search_paths: Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsConfigurationSplitDnArgs', 'DnsConfigurationSplitDnArgsDict']]]] split_dns: Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsConfigurationState.__new__(_DnsConfigurationState)

        __props__.__dict__["magic_dns"] = magic_dns
        __props__.__dict__["nameservers"] = nameservers
        __props__.__dict__["override_local_dns"] = override_local_dns
        __props__.__dict__["search_paths"] = search_paths
        __props__.__dict__["split_dns"] = split_dns
        return DnsConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="magicDns")
    def magic_dns(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether or not to enable MagicDNS. Defaults to true.
        """
        return pulumi.get(self, "magic_dns")

    @_builtins.property
    @pulumi.getter
    def nameservers(self) -> pulumi.Output[Optional[Sequence['outputs.DnsConfigurationNameserver']]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries. `override_local_dns` must also be true to prefer these nameservers over local DNS configuration.
        """
        return pulumi.get(self, "nameservers")

    @_builtins.property
    @pulumi.getter(name="overrideLocalDns")
    def override_local_dns(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
        """
        return pulumi.get(self, "override_local_dns")

    @_builtins.property
    @pulumi.getter(name="searchPaths")
    def search_paths(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
        """
        return pulumi.get(self, "search_paths")

    @_builtins.property
    @pulumi.getter(name="splitDns")
    def split_dns(self) -> pulumi.Output[Optional[Sequence['outputs.DnsConfigurationSplitDn']]]:
        """
        Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `override_local_dns`.
        """
        return pulumi.get(self, "split_dns")

