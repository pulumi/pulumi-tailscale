# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TailnetSettingsArgs', 'TailnetSettings']

@pulumi.input_type
class TailnetSettingsArgs:
    def __init__(__self__, *,
                 devices_approval_on: Optional[pulumi.Input[bool]] = None,
                 devices_auto_updates_on: Optional[pulumi.Input[bool]] = None,
                 devices_key_duration_days: Optional[pulumi.Input[int]] = None,
                 network_flow_logging_on: Optional[pulumi.Input[bool]] = None,
                 posture_identity_collection_on: Optional[pulumi.Input[bool]] = None,
                 regional_routing_on: Optional[pulumi.Input[bool]] = None,
                 users_approval_on: Optional[pulumi.Input[bool]] = None,
                 users_role_allowed_to_join_external_tailnet: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TailnetSettings resource.
        :param pulumi.Input[bool] devices_approval_on: Whether device approval is enabled for the tailnet
        :param pulumi.Input[bool] devices_auto_updates_on: Whether auto updates are enabled for devices that belong to this tailnet
        :param pulumi.Input[int] devices_key_duration_days: The key expiry duration for devices on this tailnet
        :param pulumi.Input[bool] network_flow_logging_on: Whether network flog logs are enabled for the tailnet
        :param pulumi.Input[bool] posture_identity_collection_on: Whether identity collection is enabled for device posture integrations for the tailnet
        :param pulumi.Input[bool] regional_routing_on: Whether regional routing is enabled for the tailnet
        :param pulumi.Input[bool] users_approval_on: Whether user approval is enabled for this tailnet
        :param pulumi.Input[str] users_role_allowed_to_join_external_tailnet: Which user roles are allowed to join external tailnets
        """
        if devices_approval_on is not None:
            pulumi.set(__self__, "devices_approval_on", devices_approval_on)
        if devices_auto_updates_on is not None:
            pulumi.set(__self__, "devices_auto_updates_on", devices_auto_updates_on)
        if devices_key_duration_days is not None:
            pulumi.set(__self__, "devices_key_duration_days", devices_key_duration_days)
        if network_flow_logging_on is not None:
            pulumi.set(__self__, "network_flow_logging_on", network_flow_logging_on)
        if posture_identity_collection_on is not None:
            pulumi.set(__self__, "posture_identity_collection_on", posture_identity_collection_on)
        if regional_routing_on is not None:
            pulumi.set(__self__, "regional_routing_on", regional_routing_on)
        if users_approval_on is not None:
            pulumi.set(__self__, "users_approval_on", users_approval_on)
        if users_role_allowed_to_join_external_tailnet is not None:
            pulumi.set(__self__, "users_role_allowed_to_join_external_tailnet", users_role_allowed_to_join_external_tailnet)

    @property
    @pulumi.getter(name="devicesApprovalOn")
    def devices_approval_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether device approval is enabled for the tailnet
        """
        return pulumi.get(self, "devices_approval_on")

    @devices_approval_on.setter
    def devices_approval_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "devices_approval_on", value)

    @property
    @pulumi.getter(name="devicesAutoUpdatesOn")
    def devices_auto_updates_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether auto updates are enabled for devices that belong to this tailnet
        """
        return pulumi.get(self, "devices_auto_updates_on")

    @devices_auto_updates_on.setter
    def devices_auto_updates_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "devices_auto_updates_on", value)

    @property
    @pulumi.getter(name="devicesKeyDurationDays")
    def devices_key_duration_days(self) -> Optional[pulumi.Input[int]]:
        """
        The key expiry duration for devices on this tailnet
        """
        return pulumi.get(self, "devices_key_duration_days")

    @devices_key_duration_days.setter
    def devices_key_duration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devices_key_duration_days", value)

    @property
    @pulumi.getter(name="networkFlowLoggingOn")
    def network_flow_logging_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether network flog logs are enabled for the tailnet
        """
        return pulumi.get(self, "network_flow_logging_on")

    @network_flow_logging_on.setter
    def network_flow_logging_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_flow_logging_on", value)

    @property
    @pulumi.getter(name="postureIdentityCollectionOn")
    def posture_identity_collection_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether identity collection is enabled for device posture integrations for the tailnet
        """
        return pulumi.get(self, "posture_identity_collection_on")

    @posture_identity_collection_on.setter
    def posture_identity_collection_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "posture_identity_collection_on", value)

    @property
    @pulumi.getter(name="regionalRoutingOn")
    def regional_routing_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether regional routing is enabled for the tailnet
        """
        return pulumi.get(self, "regional_routing_on")

    @regional_routing_on.setter
    def regional_routing_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regional_routing_on", value)

    @property
    @pulumi.getter(name="usersApprovalOn")
    def users_approval_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether user approval is enabled for this tailnet
        """
        return pulumi.get(self, "users_approval_on")

    @users_approval_on.setter
    def users_approval_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "users_approval_on", value)

    @property
    @pulumi.getter(name="usersRoleAllowedToJoinExternalTailnet")
    def users_role_allowed_to_join_external_tailnet(self) -> Optional[pulumi.Input[str]]:
        """
        Which user roles are allowed to join external tailnets
        """
        return pulumi.get(self, "users_role_allowed_to_join_external_tailnet")

    @users_role_allowed_to_join_external_tailnet.setter
    def users_role_allowed_to_join_external_tailnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "users_role_allowed_to_join_external_tailnet", value)


@pulumi.input_type
class _TailnetSettingsState:
    def __init__(__self__, *,
                 devices_approval_on: Optional[pulumi.Input[bool]] = None,
                 devices_auto_updates_on: Optional[pulumi.Input[bool]] = None,
                 devices_key_duration_days: Optional[pulumi.Input[int]] = None,
                 network_flow_logging_on: Optional[pulumi.Input[bool]] = None,
                 posture_identity_collection_on: Optional[pulumi.Input[bool]] = None,
                 regional_routing_on: Optional[pulumi.Input[bool]] = None,
                 users_approval_on: Optional[pulumi.Input[bool]] = None,
                 users_role_allowed_to_join_external_tailnet: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TailnetSettings resources.
        :param pulumi.Input[bool] devices_approval_on: Whether device approval is enabled for the tailnet
        :param pulumi.Input[bool] devices_auto_updates_on: Whether auto updates are enabled for devices that belong to this tailnet
        :param pulumi.Input[int] devices_key_duration_days: The key expiry duration for devices on this tailnet
        :param pulumi.Input[bool] network_flow_logging_on: Whether network flog logs are enabled for the tailnet
        :param pulumi.Input[bool] posture_identity_collection_on: Whether identity collection is enabled for device posture integrations for the tailnet
        :param pulumi.Input[bool] regional_routing_on: Whether regional routing is enabled for the tailnet
        :param pulumi.Input[bool] users_approval_on: Whether user approval is enabled for this tailnet
        :param pulumi.Input[str] users_role_allowed_to_join_external_tailnet: Which user roles are allowed to join external tailnets
        """
        if devices_approval_on is not None:
            pulumi.set(__self__, "devices_approval_on", devices_approval_on)
        if devices_auto_updates_on is not None:
            pulumi.set(__self__, "devices_auto_updates_on", devices_auto_updates_on)
        if devices_key_duration_days is not None:
            pulumi.set(__self__, "devices_key_duration_days", devices_key_duration_days)
        if network_flow_logging_on is not None:
            pulumi.set(__self__, "network_flow_logging_on", network_flow_logging_on)
        if posture_identity_collection_on is not None:
            pulumi.set(__self__, "posture_identity_collection_on", posture_identity_collection_on)
        if regional_routing_on is not None:
            pulumi.set(__self__, "regional_routing_on", regional_routing_on)
        if users_approval_on is not None:
            pulumi.set(__self__, "users_approval_on", users_approval_on)
        if users_role_allowed_to_join_external_tailnet is not None:
            pulumi.set(__self__, "users_role_allowed_to_join_external_tailnet", users_role_allowed_to_join_external_tailnet)

    @property
    @pulumi.getter(name="devicesApprovalOn")
    def devices_approval_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether device approval is enabled for the tailnet
        """
        return pulumi.get(self, "devices_approval_on")

    @devices_approval_on.setter
    def devices_approval_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "devices_approval_on", value)

    @property
    @pulumi.getter(name="devicesAutoUpdatesOn")
    def devices_auto_updates_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether auto updates are enabled for devices that belong to this tailnet
        """
        return pulumi.get(self, "devices_auto_updates_on")

    @devices_auto_updates_on.setter
    def devices_auto_updates_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "devices_auto_updates_on", value)

    @property
    @pulumi.getter(name="devicesKeyDurationDays")
    def devices_key_duration_days(self) -> Optional[pulumi.Input[int]]:
        """
        The key expiry duration for devices on this tailnet
        """
        return pulumi.get(self, "devices_key_duration_days")

    @devices_key_duration_days.setter
    def devices_key_duration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "devices_key_duration_days", value)

    @property
    @pulumi.getter(name="networkFlowLoggingOn")
    def network_flow_logging_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether network flog logs are enabled for the tailnet
        """
        return pulumi.get(self, "network_flow_logging_on")

    @network_flow_logging_on.setter
    def network_flow_logging_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_flow_logging_on", value)

    @property
    @pulumi.getter(name="postureIdentityCollectionOn")
    def posture_identity_collection_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether identity collection is enabled for device posture integrations for the tailnet
        """
        return pulumi.get(self, "posture_identity_collection_on")

    @posture_identity_collection_on.setter
    def posture_identity_collection_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "posture_identity_collection_on", value)

    @property
    @pulumi.getter(name="regionalRoutingOn")
    def regional_routing_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether regional routing is enabled for the tailnet
        """
        return pulumi.get(self, "regional_routing_on")

    @regional_routing_on.setter
    def regional_routing_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regional_routing_on", value)

    @property
    @pulumi.getter(name="usersApprovalOn")
    def users_approval_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether user approval is enabled for this tailnet
        """
        return pulumi.get(self, "users_approval_on")

    @users_approval_on.setter
    def users_approval_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "users_approval_on", value)

    @property
    @pulumi.getter(name="usersRoleAllowedToJoinExternalTailnet")
    def users_role_allowed_to_join_external_tailnet(self) -> Optional[pulumi.Input[str]]:
        """
        Which user roles are allowed to join external tailnets
        """
        return pulumi.get(self, "users_role_allowed_to_join_external_tailnet")

    @users_role_allowed_to_join_external_tailnet.setter
    def users_role_allowed_to_join_external_tailnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "users_role_allowed_to_join_external_tailnet", value)


class TailnetSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices_approval_on: Optional[pulumi.Input[bool]] = None,
                 devices_auto_updates_on: Optional[pulumi.Input[bool]] = None,
                 devices_key_duration_days: Optional[pulumi.Input[int]] = None,
                 network_flow_logging_on: Optional[pulumi.Input[bool]] = None,
                 posture_identity_collection_on: Optional[pulumi.Input[bool]] = None,
                 regional_routing_on: Optional[pulumi.Input[bool]] = None,
                 users_approval_on: Optional[pulumi.Input[bool]] = None,
                 users_role_allowed_to_join_external_tailnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The tailnet_settings resource allows you to configure settings for your tailnet. See https://tailscale.com/api#tag/tailnetsettings for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] devices_approval_on: Whether device approval is enabled for the tailnet
        :param pulumi.Input[bool] devices_auto_updates_on: Whether auto updates are enabled for devices that belong to this tailnet
        :param pulumi.Input[int] devices_key_duration_days: The key expiry duration for devices on this tailnet
        :param pulumi.Input[bool] network_flow_logging_on: Whether network flog logs are enabled for the tailnet
        :param pulumi.Input[bool] posture_identity_collection_on: Whether identity collection is enabled for device posture integrations for the tailnet
        :param pulumi.Input[bool] regional_routing_on: Whether regional routing is enabled for the tailnet
        :param pulumi.Input[bool] users_approval_on: Whether user approval is enabled for this tailnet
        :param pulumi.Input[str] users_role_allowed_to_join_external_tailnet: Which user roles are allowed to join external tailnets
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TailnetSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The tailnet_settings resource allows you to configure settings for your tailnet. See https://tailscale.com/api#tag/tailnetsettings for more information.

        :param str resource_name: The name of the resource.
        :param TailnetSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TailnetSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices_approval_on: Optional[pulumi.Input[bool]] = None,
                 devices_auto_updates_on: Optional[pulumi.Input[bool]] = None,
                 devices_key_duration_days: Optional[pulumi.Input[int]] = None,
                 network_flow_logging_on: Optional[pulumi.Input[bool]] = None,
                 posture_identity_collection_on: Optional[pulumi.Input[bool]] = None,
                 regional_routing_on: Optional[pulumi.Input[bool]] = None,
                 users_approval_on: Optional[pulumi.Input[bool]] = None,
                 users_role_allowed_to_join_external_tailnet: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TailnetSettingsArgs.__new__(TailnetSettingsArgs)

            __props__.__dict__["devices_approval_on"] = devices_approval_on
            __props__.__dict__["devices_auto_updates_on"] = devices_auto_updates_on
            __props__.__dict__["devices_key_duration_days"] = devices_key_duration_days
            __props__.__dict__["network_flow_logging_on"] = network_flow_logging_on
            __props__.__dict__["posture_identity_collection_on"] = posture_identity_collection_on
            __props__.__dict__["regional_routing_on"] = regional_routing_on
            __props__.__dict__["users_approval_on"] = users_approval_on
            __props__.__dict__["users_role_allowed_to_join_external_tailnet"] = users_role_allowed_to_join_external_tailnet
        super(TailnetSettings, __self__).__init__(
            'tailscale:index/tailnetSettings:TailnetSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            devices_approval_on: Optional[pulumi.Input[bool]] = None,
            devices_auto_updates_on: Optional[pulumi.Input[bool]] = None,
            devices_key_duration_days: Optional[pulumi.Input[int]] = None,
            network_flow_logging_on: Optional[pulumi.Input[bool]] = None,
            posture_identity_collection_on: Optional[pulumi.Input[bool]] = None,
            regional_routing_on: Optional[pulumi.Input[bool]] = None,
            users_approval_on: Optional[pulumi.Input[bool]] = None,
            users_role_allowed_to_join_external_tailnet: Optional[pulumi.Input[str]] = None) -> 'TailnetSettings':
        """
        Get an existing TailnetSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] devices_approval_on: Whether device approval is enabled for the tailnet
        :param pulumi.Input[bool] devices_auto_updates_on: Whether auto updates are enabled for devices that belong to this tailnet
        :param pulumi.Input[int] devices_key_duration_days: The key expiry duration for devices on this tailnet
        :param pulumi.Input[bool] network_flow_logging_on: Whether network flog logs are enabled for the tailnet
        :param pulumi.Input[bool] posture_identity_collection_on: Whether identity collection is enabled for device posture integrations for the tailnet
        :param pulumi.Input[bool] regional_routing_on: Whether regional routing is enabled for the tailnet
        :param pulumi.Input[bool] users_approval_on: Whether user approval is enabled for this tailnet
        :param pulumi.Input[str] users_role_allowed_to_join_external_tailnet: Which user roles are allowed to join external tailnets
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TailnetSettingsState.__new__(_TailnetSettingsState)

        __props__.__dict__["devices_approval_on"] = devices_approval_on
        __props__.__dict__["devices_auto_updates_on"] = devices_auto_updates_on
        __props__.__dict__["devices_key_duration_days"] = devices_key_duration_days
        __props__.__dict__["network_flow_logging_on"] = network_flow_logging_on
        __props__.__dict__["posture_identity_collection_on"] = posture_identity_collection_on
        __props__.__dict__["regional_routing_on"] = regional_routing_on
        __props__.__dict__["users_approval_on"] = users_approval_on
        __props__.__dict__["users_role_allowed_to_join_external_tailnet"] = users_role_allowed_to_join_external_tailnet
        return TailnetSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="devicesApprovalOn")
    def devices_approval_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether device approval is enabled for the tailnet
        """
        return pulumi.get(self, "devices_approval_on")

    @property
    @pulumi.getter(name="devicesAutoUpdatesOn")
    def devices_auto_updates_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether auto updates are enabled for devices that belong to this tailnet
        """
        return pulumi.get(self, "devices_auto_updates_on")

    @property
    @pulumi.getter(name="devicesKeyDurationDays")
    def devices_key_duration_days(self) -> pulumi.Output[Optional[int]]:
        """
        The key expiry duration for devices on this tailnet
        """
        return pulumi.get(self, "devices_key_duration_days")

    @property
    @pulumi.getter(name="networkFlowLoggingOn")
    def network_flow_logging_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether network flog logs are enabled for the tailnet
        """
        return pulumi.get(self, "network_flow_logging_on")

    @property
    @pulumi.getter(name="postureIdentityCollectionOn")
    def posture_identity_collection_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether identity collection is enabled for device posture integrations for the tailnet
        """
        return pulumi.get(self, "posture_identity_collection_on")

    @property
    @pulumi.getter(name="regionalRoutingOn")
    def regional_routing_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether regional routing is enabled for the tailnet
        """
        return pulumi.get(self, "regional_routing_on")

    @property
    @pulumi.getter(name="usersApprovalOn")
    def users_approval_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether user approval is enabled for this tailnet
        """
        return pulumi.get(self, "users_approval_on")

    @property
    @pulumi.getter(name="usersRoleAllowedToJoinExternalTailnet")
    def users_role_allowed_to_join_external_tailnet(self) -> pulumi.Output[Optional[str]]:
        """
        Which user roles are allowed to join external tailnets
        """
        return pulumi.get(self, "users_role_allowed_to_join_external_tailnet")

