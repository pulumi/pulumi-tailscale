# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContactsArgs', 'Contacts']

@pulumi.input_type
class ContactsArgs:
    def __init__(__self__, *,
                 account: pulumi.Input['ContactsAccountArgs'],
                 security: pulumi.Input['ContactsSecurityArgs'],
                 support: pulumi.Input['ContactsSupportArgs']):
        """
        The set of arguments for constructing a Contacts resource.
        :param pulumi.Input['ContactsAccountArgs'] account: Configuration for communications about important changes to your tailnet
        :param pulumi.Input['ContactsSecurityArgs'] security: Configuration for communications about security issues affecting your tailnet
        :param pulumi.Input['ContactsSupportArgs'] support: Configuration for communications about misconfigurations in your tailnet
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "support", support)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input['ContactsAccountArgs']:
        """
        Configuration for communications about important changes to your tailnet
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input['ContactsAccountArgs']):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def security(self) -> pulumi.Input['ContactsSecurityArgs']:
        """
        Configuration for communications about security issues affecting your tailnet
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: pulumi.Input['ContactsSecurityArgs']):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def support(self) -> pulumi.Input['ContactsSupportArgs']:
        """
        Configuration for communications about misconfigurations in your tailnet
        """
        return pulumi.get(self, "support")

    @support.setter
    def support(self, value: pulumi.Input['ContactsSupportArgs']):
        pulumi.set(self, "support", value)


@pulumi.input_type
class _ContactsState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['ContactsAccountArgs']] = None,
                 security: Optional[pulumi.Input['ContactsSecurityArgs']] = None,
                 support: Optional[pulumi.Input['ContactsSupportArgs']] = None):
        """
        Input properties used for looking up and filtering Contacts resources.
        :param pulumi.Input['ContactsAccountArgs'] account: Configuration for communications about important changes to your tailnet
        :param pulumi.Input['ContactsSecurityArgs'] security: Configuration for communications about security issues affecting your tailnet
        :param pulumi.Input['ContactsSupportArgs'] support: Configuration for communications about misconfigurations in your tailnet
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if support is not None:
            pulumi.set(__self__, "support", support)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ContactsAccountArgs']]:
        """
        Configuration for communications about important changes to your tailnet
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ContactsAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ContactsSecurityArgs']]:
        """
        Configuration for communications about security issues affecting your tailnet
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ContactsSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def support(self) -> Optional[pulumi.Input['ContactsSupportArgs']]:
        """
        Configuration for communications about misconfigurations in your tailnet
        """
        return pulumi.get(self, "support")

    @support.setter
    def support(self, value: Optional[pulumi.Input['ContactsSupportArgs']]):
        pulumi.set(self, "support", value)


class Contacts(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['ContactsAccountArgs', 'ContactsAccountArgsDict']]] = None,
                 security: Optional[pulumi.Input[Union['ContactsSecurityArgs', 'ContactsSecurityArgsDict']]] = None,
                 support: Optional[pulumi.Input[Union['ContactsSupportArgs', 'ContactsSupportArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_tailscale as tailscale

        sample_contacts = tailscale.Contacts("sample_contacts",
            account={
                "email": "account@example.com",
            },
            support={
                "email": "support@example.com",
            },
            security={
                "email": "security@example.com",
            })
        ```

        ## Import

        ID doesn't matter.

        ```sh
        $ pulumi import tailscale:index/contacts:Contacts sample_contacts contacts
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ContactsAccountArgs', 'ContactsAccountArgsDict']] account: Configuration for communications about important changes to your tailnet
        :param pulumi.Input[Union['ContactsSecurityArgs', 'ContactsSecurityArgsDict']] security: Configuration for communications about security issues affecting your tailnet
        :param pulumi.Input[Union['ContactsSupportArgs', 'ContactsSupportArgsDict']] support: Configuration for communications about misconfigurations in your tailnet
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContactsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_tailscale as tailscale

        sample_contacts = tailscale.Contacts("sample_contacts",
            account={
                "email": "account@example.com",
            },
            support={
                "email": "support@example.com",
            },
            security={
                "email": "security@example.com",
            })
        ```

        ## Import

        ID doesn't matter.

        ```sh
        $ pulumi import tailscale:index/contacts:Contacts sample_contacts contacts
        ```

        :param str resource_name: The name of the resource.
        :param ContactsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContactsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['ContactsAccountArgs', 'ContactsAccountArgsDict']]] = None,
                 security: Optional[pulumi.Input[Union['ContactsSecurityArgs', 'ContactsSecurityArgsDict']]] = None,
                 support: Optional[pulumi.Input[Union['ContactsSupportArgs', 'ContactsSupportArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContactsArgs.__new__(ContactsArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            if security is None and not opts.urn:
                raise TypeError("Missing required property 'security'")
            __props__.__dict__["security"] = security
            if support is None and not opts.urn:
                raise TypeError("Missing required property 'support'")
            __props__.__dict__["support"] = support
        super(Contacts, __self__).__init__(
            'tailscale:index/contacts:Contacts',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[Union['ContactsAccountArgs', 'ContactsAccountArgsDict']]] = None,
            security: Optional[pulumi.Input[Union['ContactsSecurityArgs', 'ContactsSecurityArgsDict']]] = None,
            support: Optional[pulumi.Input[Union['ContactsSupportArgs', 'ContactsSupportArgsDict']]] = None) -> 'Contacts':
        """
        Get an existing Contacts resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ContactsAccountArgs', 'ContactsAccountArgsDict']] account: Configuration for communications about important changes to your tailnet
        :param pulumi.Input[Union['ContactsSecurityArgs', 'ContactsSecurityArgsDict']] security: Configuration for communications about security issues affecting your tailnet
        :param pulumi.Input[Union['ContactsSupportArgs', 'ContactsSupportArgsDict']] support: Configuration for communications about misconfigurations in your tailnet
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContactsState.__new__(_ContactsState)

        __props__.__dict__["account"] = account
        __props__.__dict__["security"] = security
        __props__.__dict__["support"] = support
        return Contacts(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.ContactsAccount']:
        """
        Configuration for communications about important changes to your tailnet
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output['outputs.ContactsSecurity']:
        """
        Configuration for communications about security issues affecting your tailnet
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def support(self) -> pulumi.Output['outputs.ContactsSupport']:
        """
        Configuration for communications about misconfigurations in your tailnet
        """
        return pulumi.get(self, "support")

