# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ContactsAccountArgs',
    'ContactsAccountArgsDict',
    'ContactsSecurityArgs',
    'ContactsSecurityArgsDict',
    'ContactsSupportArgs',
    'ContactsSupportArgsDict',
]

MYPY = False

if not MYPY:
    class ContactsAccountArgsDict(TypedDict):
        email: pulumi.Input[_builtins.str]
        """
        Email address to send communications to
        """
elif False:
    ContactsAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContactsAccountArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] email: Email address to send communications to
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        Email address to send communications to
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)


if not MYPY:
    class ContactsSecurityArgsDict(TypedDict):
        email: pulumi.Input[_builtins.str]
        """
        Email address to send communications to
        """
elif False:
    ContactsSecurityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContactsSecurityArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] email: Email address to send communications to
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        Email address to send communications to
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)


if not MYPY:
    class ContactsSupportArgsDict(TypedDict):
        email: pulumi.Input[_builtins.str]
        """
        Email address to send communications to
        """
elif False:
    ContactsSupportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContactsSupportArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] email: Email address to send communications to
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        """
        Email address to send communications to
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)


