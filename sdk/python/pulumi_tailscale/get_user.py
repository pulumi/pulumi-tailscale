# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, created=None, currently_connected=None, device_count=None, display_name=None, id=None, last_seen=None, login_name=None, profile_pic_url=None, role=None, status=None, tailnet_id=None, type=None):
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if currently_connected and not isinstance(currently_connected, bool):
            raise TypeError("Expected argument 'currently_connected' to be a bool")
        pulumi.set(__self__, "currently_connected", currently_connected)
        if device_count and not isinstance(device_count, int):
            raise TypeError("Expected argument 'device_count' to be a int")
        pulumi.set(__self__, "device_count", device_count)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_seen and not isinstance(last_seen, str):
            raise TypeError("Expected argument 'last_seen' to be a str")
        pulumi.set(__self__, "last_seen", last_seen)
        if login_name and not isinstance(login_name, str):
            raise TypeError("Expected argument 'login_name' to be a str")
        pulumi.set(__self__, "login_name", login_name)
        if profile_pic_url and not isinstance(profile_pic_url, str):
            raise TypeError("Expected argument 'profile_pic_url' to be a str")
        pulumi.set(__self__, "profile_pic_url", profile_pic_url)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tailnet_id and not isinstance(tailnet_id, str):
            raise TypeError("Expected argument 'tailnet_id' to be a str")
        pulumi.set(__self__, "tailnet_id", tailnet_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The time the user joined their tailnet.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="currentlyConnected")
    def currently_connected(self) -> bool:
        """
        true when the user has a node currently connected to the control server.
        """
        return pulumi.get(self, "currently_connected")

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> int:
        """
        Number of devices the user owns.
        """
        return pulumi.get(self, "device_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> str:
        """
        The later of either: a) The last time any of the user's nodes were connected to the network or b) The last time the user authenticated to any tailscale service, including the admin panel.
        """
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[str]:
        """
        The emailish login name of the user.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="profilePicUrl")
    def profile_pic_url(self) -> str:
        """
        The profile pic URL for the user.
        """
        return pulumi.get(self, "profile_pic_url")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role of the user.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the user.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tailnetId")
    def tailnet_id(self) -> str:
        """
        The tailnet that owns the user.
        """
        return pulumi.get(self, "tailnet_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of relation this user has to the tailnet associated with the request.
        """
        return pulumi.get(self, "type")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            created=self.created,
            currently_connected=self.currently_connected,
            device_count=self.device_count,
            display_name=self.display_name,
            id=self.id,
            last_seen=self.last_seen,
            login_name=self.login_name,
            profile_pic_url=self.profile_pic_url,
            role=self.role,
            status=self.status,
            tailnet_id=self.tailnet_id,
            type=self.type)


def get_user(id: Optional[str] = None,
             login_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    The user data source describes a single user in a tailnet


    :param str id: The unique identifier for the user.
    :param str login_name: The emailish login name of the user.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['loginName'] = login_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tailscale:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        created=pulumi.get(__ret__, 'created'),
        currently_connected=pulumi.get(__ret__, 'currently_connected'),
        device_count=pulumi.get(__ret__, 'device_count'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        last_seen=pulumi.get(__ret__, 'last_seen'),
        login_name=pulumi.get(__ret__, 'login_name'),
        profile_pic_url=pulumi.get(__ret__, 'profile_pic_url'),
        role=pulumi.get(__ret__, 'role'),
        status=pulumi.get(__ret__, 'status'),
        tailnet_id=pulumi.get(__ret__, 'tailnet_id'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_user)
def get_user_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                    login_name: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    The user data source describes a single user in a tailnet


    :param str id: The unique identifier for the user.
    :param str login_name: The emailish login name of the user.
    """
    ...
