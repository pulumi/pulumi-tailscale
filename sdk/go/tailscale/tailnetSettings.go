// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The tailnetSettings resource allows you to configure settings for your tailnet. See https://tailscale.com/api#tag/tailnetsettings for more information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tailscale.NewTailnetSettings(ctx, "sample_tailnet_settings", &tailscale.TailnetSettingsArgs{
//				AclsExternallyManagedOn:               pulumi.Bool(true),
//				AclsExternalLink:                      pulumi.String("https://github.com/octocat/Hello-World"),
//				DevicesApprovalOn:                     pulumi.Bool(true),
//				DevicesAutoUpdatesOn:                  pulumi.Bool(true),
//				DevicesKeyDurationDays:                pulumi.Int(5),
//				UsersApprovalOn:                       pulumi.Bool(true),
//				UsersRoleAllowedToJoinExternalTailnet: pulumi.String("member"),
//				PostureIdentityCollectionOn:           pulumi.Bool(true),
//				HttpsEnabled:                          pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ID doesn't matter.
//
// ```sh
// $ pulumi import tailscale:index/tailnetSettings:TailnetSettings sample_preferences tailnet_settings
// ```
type TailnetSettings struct {
	pulumi.CustomResourceState

	// Link to your external ACL definition or management system. Must be a valid URL.
	AclsExternalLink        pulumi.StringOutput `pulumi:"aclsExternalLink"`
	AclsExternallyManagedOn pulumi.BoolOutput   `pulumi:"aclsExternallyManagedOn"`
	// Whether device approval is enabled for the tailnet
	DevicesApprovalOn pulumi.BoolOutput `pulumi:"devicesApprovalOn"`
	// Whether auto updates are enabled for devices that belong to this tailnet
	DevicesAutoUpdatesOn pulumi.BoolOutput `pulumi:"devicesAutoUpdatesOn"`
	// The key expiry duration for devices on this tailnet
	DevicesKeyDurationDays pulumi.IntOutput `pulumi:"devicesKeyDurationDays"`
	// Whether provisioning of HTTPS certificates is enabled for the tailnet
	HttpsEnabled pulumi.BoolOutput `pulumi:"httpsEnabled"`
	// Whether network flow logs are enabled for the tailnet
	NetworkFlowLoggingOn pulumi.BoolOutput `pulumi:"networkFlowLoggingOn"`
	// Whether identity collection is enabled for device posture integrations for the tailnet
	PostureIdentityCollectionOn pulumi.BoolOutput `pulumi:"postureIdentityCollectionOn"`
	// Whether regional routing is enabled for the tailnet
	RegionalRoutingOn pulumi.BoolOutput `pulumi:"regionalRoutingOn"`
	// Whether user approval is enabled for this tailnet
	UsersApprovalOn pulumi.BoolOutput `pulumi:"usersApprovalOn"`
	// Which user roles are allowed to join external tailnets
	UsersRoleAllowedToJoinExternalTailnet pulumi.StringOutput `pulumi:"usersRoleAllowedToJoinExternalTailnet"`
}

// NewTailnetSettings registers a new resource with the given unique name, arguments, and options.
func NewTailnetSettings(ctx *pulumi.Context,
	name string, args *TailnetSettingsArgs, opts ...pulumi.ResourceOption) (*TailnetSettings, error) {
	if args == nil {
		args = &TailnetSettingsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TailnetSettings
	err := ctx.RegisterResource("tailscale:index/tailnetSettings:TailnetSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTailnetSettings gets an existing TailnetSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTailnetSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TailnetSettingsState, opts ...pulumi.ResourceOption) (*TailnetSettings, error) {
	var resource TailnetSettings
	err := ctx.ReadResource("tailscale:index/tailnetSettings:TailnetSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TailnetSettings resources.
type tailnetSettingsState struct {
	// Link to your external ACL definition or management system. Must be a valid URL.
	AclsExternalLink        *string `pulumi:"aclsExternalLink"`
	AclsExternallyManagedOn *bool   `pulumi:"aclsExternallyManagedOn"`
	// Whether device approval is enabled for the tailnet
	DevicesApprovalOn *bool `pulumi:"devicesApprovalOn"`
	// Whether auto updates are enabled for devices that belong to this tailnet
	DevicesAutoUpdatesOn *bool `pulumi:"devicesAutoUpdatesOn"`
	// The key expiry duration for devices on this tailnet
	DevicesKeyDurationDays *int `pulumi:"devicesKeyDurationDays"`
	// Whether provisioning of HTTPS certificates is enabled for the tailnet
	HttpsEnabled *bool `pulumi:"httpsEnabled"`
	// Whether network flow logs are enabled for the tailnet
	NetworkFlowLoggingOn *bool `pulumi:"networkFlowLoggingOn"`
	// Whether identity collection is enabled for device posture integrations for the tailnet
	PostureIdentityCollectionOn *bool `pulumi:"postureIdentityCollectionOn"`
	// Whether regional routing is enabled for the tailnet
	RegionalRoutingOn *bool `pulumi:"regionalRoutingOn"`
	// Whether user approval is enabled for this tailnet
	UsersApprovalOn *bool `pulumi:"usersApprovalOn"`
	// Which user roles are allowed to join external tailnets
	UsersRoleAllowedToJoinExternalTailnet *string `pulumi:"usersRoleAllowedToJoinExternalTailnet"`
}

type TailnetSettingsState struct {
	// Link to your external ACL definition or management system. Must be a valid URL.
	AclsExternalLink        pulumi.StringPtrInput
	AclsExternallyManagedOn pulumi.BoolPtrInput
	// Whether device approval is enabled for the tailnet
	DevicesApprovalOn pulumi.BoolPtrInput
	// Whether auto updates are enabled for devices that belong to this tailnet
	DevicesAutoUpdatesOn pulumi.BoolPtrInput
	// The key expiry duration for devices on this tailnet
	DevicesKeyDurationDays pulumi.IntPtrInput
	// Whether provisioning of HTTPS certificates is enabled for the tailnet
	HttpsEnabled pulumi.BoolPtrInput
	// Whether network flow logs are enabled for the tailnet
	NetworkFlowLoggingOn pulumi.BoolPtrInput
	// Whether identity collection is enabled for device posture integrations for the tailnet
	PostureIdentityCollectionOn pulumi.BoolPtrInput
	// Whether regional routing is enabled for the tailnet
	RegionalRoutingOn pulumi.BoolPtrInput
	// Whether user approval is enabled for this tailnet
	UsersApprovalOn pulumi.BoolPtrInput
	// Which user roles are allowed to join external tailnets
	UsersRoleAllowedToJoinExternalTailnet pulumi.StringPtrInput
}

func (TailnetSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*tailnetSettingsState)(nil)).Elem()
}

type tailnetSettingsArgs struct {
	// Link to your external ACL definition or management system. Must be a valid URL.
	AclsExternalLink        *string `pulumi:"aclsExternalLink"`
	AclsExternallyManagedOn *bool   `pulumi:"aclsExternallyManagedOn"`
	// Whether device approval is enabled for the tailnet
	DevicesApprovalOn *bool `pulumi:"devicesApprovalOn"`
	// Whether auto updates are enabled for devices that belong to this tailnet
	DevicesAutoUpdatesOn *bool `pulumi:"devicesAutoUpdatesOn"`
	// The key expiry duration for devices on this tailnet
	DevicesKeyDurationDays *int `pulumi:"devicesKeyDurationDays"`
	// Whether provisioning of HTTPS certificates is enabled for the tailnet
	HttpsEnabled *bool `pulumi:"httpsEnabled"`
	// Whether network flow logs are enabled for the tailnet
	NetworkFlowLoggingOn *bool `pulumi:"networkFlowLoggingOn"`
	// Whether identity collection is enabled for device posture integrations for the tailnet
	PostureIdentityCollectionOn *bool `pulumi:"postureIdentityCollectionOn"`
	// Whether regional routing is enabled for the tailnet
	RegionalRoutingOn *bool `pulumi:"regionalRoutingOn"`
	// Whether user approval is enabled for this tailnet
	UsersApprovalOn *bool `pulumi:"usersApprovalOn"`
	// Which user roles are allowed to join external tailnets
	UsersRoleAllowedToJoinExternalTailnet *string `pulumi:"usersRoleAllowedToJoinExternalTailnet"`
}

// The set of arguments for constructing a TailnetSettings resource.
type TailnetSettingsArgs struct {
	// Link to your external ACL definition or management system. Must be a valid URL.
	AclsExternalLink        pulumi.StringPtrInput
	AclsExternallyManagedOn pulumi.BoolPtrInput
	// Whether device approval is enabled for the tailnet
	DevicesApprovalOn pulumi.BoolPtrInput
	// Whether auto updates are enabled for devices that belong to this tailnet
	DevicesAutoUpdatesOn pulumi.BoolPtrInput
	// The key expiry duration for devices on this tailnet
	DevicesKeyDurationDays pulumi.IntPtrInput
	// Whether provisioning of HTTPS certificates is enabled for the tailnet
	HttpsEnabled pulumi.BoolPtrInput
	// Whether network flow logs are enabled for the tailnet
	NetworkFlowLoggingOn pulumi.BoolPtrInput
	// Whether identity collection is enabled for device posture integrations for the tailnet
	PostureIdentityCollectionOn pulumi.BoolPtrInput
	// Whether regional routing is enabled for the tailnet
	RegionalRoutingOn pulumi.BoolPtrInput
	// Whether user approval is enabled for this tailnet
	UsersApprovalOn pulumi.BoolPtrInput
	// Which user roles are allowed to join external tailnets
	UsersRoleAllowedToJoinExternalTailnet pulumi.StringPtrInput
}

func (TailnetSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tailnetSettingsArgs)(nil)).Elem()
}

type TailnetSettingsInput interface {
	pulumi.Input

	ToTailnetSettingsOutput() TailnetSettingsOutput
	ToTailnetSettingsOutputWithContext(ctx context.Context) TailnetSettingsOutput
}

func (*TailnetSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**TailnetSettings)(nil)).Elem()
}

func (i *TailnetSettings) ToTailnetSettingsOutput() TailnetSettingsOutput {
	return i.ToTailnetSettingsOutputWithContext(context.Background())
}

func (i *TailnetSettings) ToTailnetSettingsOutputWithContext(ctx context.Context) TailnetSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TailnetSettingsOutput)
}

// TailnetSettingsArrayInput is an input type that accepts TailnetSettingsArray and TailnetSettingsArrayOutput values.
// You can construct a concrete instance of `TailnetSettingsArrayInput` via:
//
//	TailnetSettingsArray{ TailnetSettingsArgs{...} }
type TailnetSettingsArrayInput interface {
	pulumi.Input

	ToTailnetSettingsArrayOutput() TailnetSettingsArrayOutput
	ToTailnetSettingsArrayOutputWithContext(context.Context) TailnetSettingsArrayOutput
}

type TailnetSettingsArray []TailnetSettingsInput

func (TailnetSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TailnetSettings)(nil)).Elem()
}

func (i TailnetSettingsArray) ToTailnetSettingsArrayOutput() TailnetSettingsArrayOutput {
	return i.ToTailnetSettingsArrayOutputWithContext(context.Background())
}

func (i TailnetSettingsArray) ToTailnetSettingsArrayOutputWithContext(ctx context.Context) TailnetSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TailnetSettingsArrayOutput)
}

// TailnetSettingsMapInput is an input type that accepts TailnetSettingsMap and TailnetSettingsMapOutput values.
// You can construct a concrete instance of `TailnetSettingsMapInput` via:
//
//	TailnetSettingsMap{ "key": TailnetSettingsArgs{...} }
type TailnetSettingsMapInput interface {
	pulumi.Input

	ToTailnetSettingsMapOutput() TailnetSettingsMapOutput
	ToTailnetSettingsMapOutputWithContext(context.Context) TailnetSettingsMapOutput
}

type TailnetSettingsMap map[string]TailnetSettingsInput

func (TailnetSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TailnetSettings)(nil)).Elem()
}

func (i TailnetSettingsMap) ToTailnetSettingsMapOutput() TailnetSettingsMapOutput {
	return i.ToTailnetSettingsMapOutputWithContext(context.Background())
}

func (i TailnetSettingsMap) ToTailnetSettingsMapOutputWithContext(ctx context.Context) TailnetSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TailnetSettingsMapOutput)
}

type TailnetSettingsOutput struct{ *pulumi.OutputState }

func (TailnetSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TailnetSettings)(nil)).Elem()
}

func (o TailnetSettingsOutput) ToTailnetSettingsOutput() TailnetSettingsOutput {
	return o
}

func (o TailnetSettingsOutput) ToTailnetSettingsOutputWithContext(ctx context.Context) TailnetSettingsOutput {
	return o
}

// Link to your external ACL definition or management system. Must be a valid URL.
func (o TailnetSettingsOutput) AclsExternalLink() pulumi.StringOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.StringOutput { return v.AclsExternalLink }).(pulumi.StringOutput)
}

func (o TailnetSettingsOutput) AclsExternallyManagedOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.AclsExternallyManagedOn }).(pulumi.BoolOutput)
}

// Whether device approval is enabled for the tailnet
func (o TailnetSettingsOutput) DevicesApprovalOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.DevicesApprovalOn }).(pulumi.BoolOutput)
}

// Whether auto updates are enabled for devices that belong to this tailnet
func (o TailnetSettingsOutput) DevicesAutoUpdatesOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.DevicesAutoUpdatesOn }).(pulumi.BoolOutput)
}

// The key expiry duration for devices on this tailnet
func (o TailnetSettingsOutput) DevicesKeyDurationDays() pulumi.IntOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.IntOutput { return v.DevicesKeyDurationDays }).(pulumi.IntOutput)
}

// Whether provisioning of HTTPS certificates is enabled for the tailnet
func (o TailnetSettingsOutput) HttpsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.HttpsEnabled }).(pulumi.BoolOutput)
}

// Whether network flow logs are enabled for the tailnet
func (o TailnetSettingsOutput) NetworkFlowLoggingOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.NetworkFlowLoggingOn }).(pulumi.BoolOutput)
}

// Whether identity collection is enabled for device posture integrations for the tailnet
func (o TailnetSettingsOutput) PostureIdentityCollectionOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.PostureIdentityCollectionOn }).(pulumi.BoolOutput)
}

// Whether regional routing is enabled for the tailnet
func (o TailnetSettingsOutput) RegionalRoutingOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.RegionalRoutingOn }).(pulumi.BoolOutput)
}

// Whether user approval is enabled for this tailnet
func (o TailnetSettingsOutput) UsersApprovalOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.BoolOutput { return v.UsersApprovalOn }).(pulumi.BoolOutput)
}

// Which user roles are allowed to join external tailnets
func (o TailnetSettingsOutput) UsersRoleAllowedToJoinExternalTailnet() pulumi.StringOutput {
	return o.ApplyT(func(v *TailnetSettings) pulumi.StringOutput { return v.UsersRoleAllowedToJoinExternalTailnet }).(pulumi.StringOutput)
}

type TailnetSettingsArrayOutput struct{ *pulumi.OutputState }

func (TailnetSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TailnetSettings)(nil)).Elem()
}

func (o TailnetSettingsArrayOutput) ToTailnetSettingsArrayOutput() TailnetSettingsArrayOutput {
	return o
}

func (o TailnetSettingsArrayOutput) ToTailnetSettingsArrayOutputWithContext(ctx context.Context) TailnetSettingsArrayOutput {
	return o
}

func (o TailnetSettingsArrayOutput) Index(i pulumi.IntInput) TailnetSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TailnetSettings {
		return vs[0].([]*TailnetSettings)[vs[1].(int)]
	}).(TailnetSettingsOutput)
}

type TailnetSettingsMapOutput struct{ *pulumi.OutputState }

func (TailnetSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TailnetSettings)(nil)).Elem()
}

func (o TailnetSettingsMapOutput) ToTailnetSettingsMapOutput() TailnetSettingsMapOutput {
	return o
}

func (o TailnetSettingsMapOutput) ToTailnetSettingsMapOutputWithContext(ctx context.Context) TailnetSettingsMapOutput {
	return o
}

func (o TailnetSettingsMapOutput) MapIndex(k pulumi.StringInput) TailnetSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TailnetSettings {
		return vs[0].(map[string]*TailnetSettings)[vs[1].(string)]
	}).(TailnetSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TailnetSettingsInput)(nil)).Elem(), &TailnetSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*TailnetSettingsArrayInput)(nil)).Elem(), TailnetSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TailnetSettingsMapInput)(nil)).Elem(), TailnetSettingsMap{})
	pulumi.RegisterOutputType(TailnetSettingsOutput{})
	pulumi.RegisterOutputType(TailnetSettingsArrayOutput{})
	pulumi.RegisterOutputType(TailnetSettingsMapOutput{})
}
