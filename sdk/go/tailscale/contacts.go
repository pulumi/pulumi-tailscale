// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tailscale.NewContacts(ctx, "sample_contacts", &tailscale.ContactsArgs{
//				Account: &tailscale.ContactsAccountArgs{
//					Email: pulumi.String("account@example.com"),
//				},
//				Support: &tailscale.ContactsSupportArgs{
//					Email: pulumi.String("support@example.com"),
//				},
//				Security: &tailscale.ContactsSecurityArgs{
//					Email: pulumi.String("security@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ID doesn't matter.
//
// ```sh
// $ pulumi import tailscale:index/contacts:Contacts sample_contacts contacts
// ```
type Contacts struct {
	pulumi.CustomResourceState

	// Configuration for communications about important changes to your tailnet
	Account ContactsAccountOutput `pulumi:"account"`
	// Configuration for communications about security issues affecting your tailnet
	Security ContactsSecurityOutput `pulumi:"security"`
	// Configuration for communications about misconfigurations in your tailnet
	Support ContactsSupportOutput `pulumi:"support"`
}

// NewContacts registers a new resource with the given unique name, arguments, and options.
func NewContacts(ctx *pulumi.Context,
	name string, args *ContactsArgs, opts ...pulumi.ResourceOption) (*Contacts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.Security == nil {
		return nil, errors.New("invalid value for required argument 'Security'")
	}
	if args.Support == nil {
		return nil, errors.New("invalid value for required argument 'Support'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Contacts
	err := ctx.RegisterResource("tailscale:index/contacts:Contacts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContacts gets an existing Contacts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContacts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactsState, opts ...pulumi.ResourceOption) (*Contacts, error) {
	var resource Contacts
	err := ctx.ReadResource("tailscale:index/contacts:Contacts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Contacts resources.
type contactsState struct {
	// Configuration for communications about important changes to your tailnet
	Account *ContactsAccount `pulumi:"account"`
	// Configuration for communications about security issues affecting your tailnet
	Security *ContactsSecurity `pulumi:"security"`
	// Configuration for communications about misconfigurations in your tailnet
	Support *ContactsSupport `pulumi:"support"`
}

type ContactsState struct {
	// Configuration for communications about important changes to your tailnet
	Account ContactsAccountPtrInput
	// Configuration for communications about security issues affecting your tailnet
	Security ContactsSecurityPtrInput
	// Configuration for communications about misconfigurations in your tailnet
	Support ContactsSupportPtrInput
}

func (ContactsState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactsState)(nil)).Elem()
}

type contactsArgs struct {
	// Configuration for communications about important changes to your tailnet
	Account ContactsAccount `pulumi:"account"`
	// Configuration for communications about security issues affecting your tailnet
	Security ContactsSecurity `pulumi:"security"`
	// Configuration for communications about misconfigurations in your tailnet
	Support ContactsSupport `pulumi:"support"`
}

// The set of arguments for constructing a Contacts resource.
type ContactsArgs struct {
	// Configuration for communications about important changes to your tailnet
	Account ContactsAccountInput
	// Configuration for communications about security issues affecting your tailnet
	Security ContactsSecurityInput
	// Configuration for communications about misconfigurations in your tailnet
	Support ContactsSupportInput
}

func (ContactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactsArgs)(nil)).Elem()
}

type ContactsInput interface {
	pulumi.Input

	ToContactsOutput() ContactsOutput
	ToContactsOutputWithContext(ctx context.Context) ContactsOutput
}

func (*Contacts) ElementType() reflect.Type {
	return reflect.TypeOf((**Contacts)(nil)).Elem()
}

func (i *Contacts) ToContactsOutput() ContactsOutput {
	return i.ToContactsOutputWithContext(context.Background())
}

func (i *Contacts) ToContactsOutputWithContext(ctx context.Context) ContactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsOutput)
}

// ContactsArrayInput is an input type that accepts ContactsArray and ContactsArrayOutput values.
// You can construct a concrete instance of `ContactsArrayInput` via:
//
//	ContactsArray{ ContactsArgs{...} }
type ContactsArrayInput interface {
	pulumi.Input

	ToContactsArrayOutput() ContactsArrayOutput
	ToContactsArrayOutputWithContext(context.Context) ContactsArrayOutput
}

type ContactsArray []ContactsInput

func (ContactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Contacts)(nil)).Elem()
}

func (i ContactsArray) ToContactsArrayOutput() ContactsArrayOutput {
	return i.ToContactsArrayOutputWithContext(context.Background())
}

func (i ContactsArray) ToContactsArrayOutputWithContext(ctx context.Context) ContactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsArrayOutput)
}

// ContactsMapInput is an input type that accepts ContactsMap and ContactsMapOutput values.
// You can construct a concrete instance of `ContactsMapInput` via:
//
//	ContactsMap{ "key": ContactsArgs{...} }
type ContactsMapInput interface {
	pulumi.Input

	ToContactsMapOutput() ContactsMapOutput
	ToContactsMapOutputWithContext(context.Context) ContactsMapOutput
}

type ContactsMap map[string]ContactsInput

func (ContactsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Contacts)(nil)).Elem()
}

func (i ContactsMap) ToContactsMapOutput() ContactsMapOutput {
	return i.ToContactsMapOutputWithContext(context.Background())
}

func (i ContactsMap) ToContactsMapOutputWithContext(ctx context.Context) ContactsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsMapOutput)
}

type ContactsOutput struct{ *pulumi.OutputState }

func (ContactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Contacts)(nil)).Elem()
}

func (o ContactsOutput) ToContactsOutput() ContactsOutput {
	return o
}

func (o ContactsOutput) ToContactsOutputWithContext(ctx context.Context) ContactsOutput {
	return o
}

// Configuration for communications about important changes to your tailnet
func (o ContactsOutput) Account() ContactsAccountOutput {
	return o.ApplyT(func(v *Contacts) ContactsAccountOutput { return v.Account }).(ContactsAccountOutput)
}

// Configuration for communications about security issues affecting your tailnet
func (o ContactsOutput) Security() ContactsSecurityOutput {
	return o.ApplyT(func(v *Contacts) ContactsSecurityOutput { return v.Security }).(ContactsSecurityOutput)
}

// Configuration for communications about misconfigurations in your tailnet
func (o ContactsOutput) Support() ContactsSupportOutput {
	return o.ApplyT(func(v *Contacts) ContactsSupportOutput { return v.Support }).(ContactsSupportOutput)
}

type ContactsArrayOutput struct{ *pulumi.OutputState }

func (ContactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Contacts)(nil)).Elem()
}

func (o ContactsArrayOutput) ToContactsArrayOutput() ContactsArrayOutput {
	return o
}

func (o ContactsArrayOutput) ToContactsArrayOutputWithContext(ctx context.Context) ContactsArrayOutput {
	return o
}

func (o ContactsArrayOutput) Index(i pulumi.IntInput) ContactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Contacts {
		return vs[0].([]*Contacts)[vs[1].(int)]
	}).(ContactsOutput)
}

type ContactsMapOutput struct{ *pulumi.OutputState }

func (ContactsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Contacts)(nil)).Elem()
}

func (o ContactsMapOutput) ToContactsMapOutput() ContactsMapOutput {
	return o
}

func (o ContactsMapOutput) ToContactsMapOutputWithContext(ctx context.Context) ContactsMapOutput {
	return o
}

func (o ContactsMapOutput) MapIndex(k pulumi.StringInput) ContactsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Contacts {
		return vs[0].(map[string]*Contacts)[vs[1].(string)]
	}).(ContactsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsInput)(nil)).Elem(), &Contacts{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsArrayInput)(nil)).Elem(), ContactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsMapInput)(nil)).Elem(), ContactsMap{})
	pulumi.RegisterOutputType(ContactsOutput{})
	pulumi.RegisterOutputType(ContactsArrayOutput{})
	pulumi.RegisterOutputType(ContactsMapOutput{})
}
