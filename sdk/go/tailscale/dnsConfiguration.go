// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tailscale.NewDnsConfiguration(ctx, "sample_configuration", &tailscale.DnsConfigurationArgs{
//				Nameservers: tailscale.DnsConfigurationNameserverArray{
//					&tailscale.DnsConfigurationNameserverArgs{
//						Address: pulumi.String("8.8.8.8"),
//					},
//					&tailscale.DnsConfigurationNameserverArgs{
//						Address:         pulumi.String("1.1.1.1"),
//						UseWithExitNode: pulumi.Bool(true),
//					},
//				},
//				SplitDns: tailscale.DnsConfigurationSplitDnArray{
//					&tailscale.DnsConfigurationSplitDnArgs{
//						Domain: pulumi.String("foo.example.com"),
//						Nameservers: tailscale.DnsConfigurationSplitDnNameserverArray{
//							&tailscale.DnsConfigurationSplitDnNameserverArgs{
//								Address:         pulumi.String("1.1.1.2"),
//								UseWithExitNode: pulumi.Bool(true),
//							},
//							&tailscale.DnsConfigurationSplitDnNameserverArgs{
//								Address: pulumi.String("1.1.1.3"),
//							},
//						},
//					},
//					&tailscale.DnsConfigurationSplitDnArgs{
//						Domain: pulumi.String("bar.example.com"),
//						Nameservers: tailscale.DnsConfigurationSplitDnNameserverArray{
//							&tailscale.DnsConfigurationSplitDnNameserverArgs{
//								Address:         pulumi.String("8.8.8.2"),
//								UseWithExitNode: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//				SearchPaths: pulumi.StringArray{
//					pulumi.String("example.com"),
//					pulumi.String("anotherexample.com"),
//				},
//				OverrideLocalDns: pulumi.Bool(true),
//				MagicDns:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ID doesn't matter.
//
// ```sh
// $ pulumi import tailscale:index/dnsConfiguration:DnsConfiguration sample_configuration dns_configuration
// ```
type DnsConfiguration struct {
	pulumi.CustomResourceState

	// Whether or not to enable MagicDNS. Defaults to true.
	MagicDns pulumi.BoolPtrOutput `pulumi:"magicDns"`
	// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
	Nameservers DnsConfigurationNameserverArrayOutput `pulumi:"nameservers"`
	// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
	OverrideLocalDns pulumi.BoolPtrOutput `pulumi:"overrideLocalDns"`
	// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
	SearchPaths pulumi.StringArrayOutput `pulumi:"searchPaths"`
	// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
	SplitDns DnsConfigurationSplitDnArrayOutput `pulumi:"splitDns"`
}

// NewDnsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewDnsConfiguration(ctx *pulumi.Context,
	name string, args *DnsConfigurationArgs, opts ...pulumi.ResourceOption) (*DnsConfiguration, error) {
	if args == nil {
		args = &DnsConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsConfiguration
	err := ctx.RegisterResource("tailscale:index/dnsConfiguration:DnsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsConfiguration gets an existing DnsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsConfigurationState, opts ...pulumi.ResourceOption) (*DnsConfiguration, error) {
	var resource DnsConfiguration
	err := ctx.ReadResource("tailscale:index/dnsConfiguration:DnsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsConfiguration resources.
type dnsConfigurationState struct {
	// Whether or not to enable MagicDNS. Defaults to true.
	MagicDns *bool `pulumi:"magicDns"`
	// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
	Nameservers []DnsConfigurationNameserver `pulumi:"nameservers"`
	// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
	OverrideLocalDns *bool `pulumi:"overrideLocalDns"`
	// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
	SearchPaths []string `pulumi:"searchPaths"`
	// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
	SplitDns []DnsConfigurationSplitDn `pulumi:"splitDns"`
}

type DnsConfigurationState struct {
	// Whether or not to enable MagicDNS. Defaults to true.
	MagicDns pulumi.BoolPtrInput
	// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
	Nameservers DnsConfigurationNameserverArrayInput
	// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
	OverrideLocalDns pulumi.BoolPtrInput
	// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
	SearchPaths pulumi.StringArrayInput
	// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
	SplitDns DnsConfigurationSplitDnArrayInput
}

func (DnsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsConfigurationState)(nil)).Elem()
}

type dnsConfigurationArgs struct {
	// Whether or not to enable MagicDNS. Defaults to true.
	MagicDns *bool `pulumi:"magicDns"`
	// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
	Nameservers []DnsConfigurationNameserver `pulumi:"nameservers"`
	// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
	OverrideLocalDns *bool `pulumi:"overrideLocalDns"`
	// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
	SearchPaths []string `pulumi:"searchPaths"`
	// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
	SplitDns []DnsConfigurationSplitDn `pulumi:"splitDns"`
}

// The set of arguments for constructing a DnsConfiguration resource.
type DnsConfigurationArgs struct {
	// Whether or not to enable MagicDNS. Defaults to true.
	MagicDns pulumi.BoolPtrInput
	// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
	Nameservers DnsConfigurationNameserverArrayInput
	// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
	OverrideLocalDns pulumi.BoolPtrInput
	// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
	SearchPaths pulumi.StringArrayInput
	// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
	SplitDns DnsConfigurationSplitDnArrayInput
}

func (DnsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsConfigurationArgs)(nil)).Elem()
}

type DnsConfigurationInput interface {
	pulumi.Input

	ToDnsConfigurationOutput() DnsConfigurationOutput
	ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput
}

func (*DnsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (i *DnsConfiguration) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return i.ToDnsConfigurationOutputWithContext(context.Background())
}

func (i *DnsConfiguration) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationOutput)
}

// DnsConfigurationArrayInput is an input type that accepts DnsConfigurationArray and DnsConfigurationArrayOutput values.
// You can construct a concrete instance of `DnsConfigurationArrayInput` via:
//
//	DnsConfigurationArray{ DnsConfigurationArgs{...} }
type DnsConfigurationArrayInput interface {
	pulumi.Input

	ToDnsConfigurationArrayOutput() DnsConfigurationArrayOutput
	ToDnsConfigurationArrayOutputWithContext(context.Context) DnsConfigurationArrayOutput
}

type DnsConfigurationArray []DnsConfigurationInput

func (DnsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsConfiguration)(nil)).Elem()
}

func (i DnsConfigurationArray) ToDnsConfigurationArrayOutput() DnsConfigurationArrayOutput {
	return i.ToDnsConfigurationArrayOutputWithContext(context.Background())
}

func (i DnsConfigurationArray) ToDnsConfigurationArrayOutputWithContext(ctx context.Context) DnsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationArrayOutput)
}

// DnsConfigurationMapInput is an input type that accepts DnsConfigurationMap and DnsConfigurationMapOutput values.
// You can construct a concrete instance of `DnsConfigurationMapInput` via:
//
//	DnsConfigurationMap{ "key": DnsConfigurationArgs{...} }
type DnsConfigurationMapInput interface {
	pulumi.Input

	ToDnsConfigurationMapOutput() DnsConfigurationMapOutput
	ToDnsConfigurationMapOutputWithContext(context.Context) DnsConfigurationMapOutput
}

type DnsConfigurationMap map[string]DnsConfigurationInput

func (DnsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsConfiguration)(nil)).Elem()
}

func (i DnsConfigurationMap) ToDnsConfigurationMapOutput() DnsConfigurationMapOutput {
	return i.ToDnsConfigurationMapOutputWithContext(context.Background())
}

func (i DnsConfigurationMap) ToDnsConfigurationMapOutputWithContext(ctx context.Context) DnsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationMapOutput)
}

type DnsConfigurationOutput struct{ *pulumi.OutputState }

func (DnsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return o
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return o
}

// Whether or not to enable MagicDNS. Defaults to true.
func (o DnsConfigurationOutput) MagicDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) pulumi.BoolPtrOutput { return v.MagicDns }).(pulumi.BoolPtrOutput)
}

// Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
func (o DnsConfigurationOutput) Nameservers() DnsConfigurationNameserverArrayOutput {
	return o.ApplyT(func(v *DnsConfiguration) DnsConfigurationNameserverArrayOutput { return v.Nameservers }).(DnsConfigurationNameserverArrayOutput)
}

// When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
func (o DnsConfigurationOutput) OverrideLocalDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) pulumi.BoolPtrOutput { return v.OverrideLocalDns }).(pulumi.BoolPtrOutput)
}

// Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
func (o DnsConfigurationOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsConfiguration) pulumi.StringArrayOutput { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
func (o DnsConfigurationOutput) SplitDns() DnsConfigurationSplitDnArrayOutput {
	return o.ApplyT(func(v *DnsConfiguration) DnsConfigurationSplitDnArrayOutput { return v.SplitDns }).(DnsConfigurationSplitDnArrayOutput)
}

type DnsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DnsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationArrayOutput) ToDnsConfigurationArrayOutput() DnsConfigurationArrayOutput {
	return o
}

func (o DnsConfigurationArrayOutput) ToDnsConfigurationArrayOutputWithContext(ctx context.Context) DnsConfigurationArrayOutput {
	return o
}

func (o DnsConfigurationArrayOutput) Index(i pulumi.IntInput) DnsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsConfiguration {
		return vs[0].([]*DnsConfiguration)[vs[1].(int)]
	}).(DnsConfigurationOutput)
}

type DnsConfigurationMapOutput struct{ *pulumi.OutputState }

func (DnsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationMapOutput) ToDnsConfigurationMapOutput() DnsConfigurationMapOutput {
	return o
}

func (o DnsConfigurationMapOutput) ToDnsConfigurationMapOutputWithContext(ctx context.Context) DnsConfigurationMapOutput {
	return o
}

func (o DnsConfigurationMapOutput) MapIndex(k pulumi.StringInput) DnsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsConfiguration {
		return vs[0].(map[string]*DnsConfiguration)[vs[1].(string)]
	}).(DnsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationInput)(nil)).Elem(), &DnsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationArrayInput)(nil)).Elem(), DnsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationMapInput)(nil)).Elem(), DnsConfigurationMap{})
	pulumi.RegisterOutputType(DnsConfigurationOutput{})
	pulumi.RegisterOutputType(DnsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DnsConfigurationMapOutput{})
}
