// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ContactsAccount struct {
	// Email address to send communications to
	Email string `pulumi:"email"`
}

// ContactsAccountInput is an input type that accepts ContactsAccountArgs and ContactsAccountOutput values.
// You can construct a concrete instance of `ContactsAccountInput` via:
//
//	ContactsAccountArgs{...}
type ContactsAccountInput interface {
	pulumi.Input

	ToContactsAccountOutput() ContactsAccountOutput
	ToContactsAccountOutputWithContext(context.Context) ContactsAccountOutput
}

type ContactsAccountArgs struct {
	// Email address to send communications to
	Email pulumi.StringInput `pulumi:"email"`
}

func (ContactsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsAccount)(nil)).Elem()
}

func (i ContactsAccountArgs) ToContactsAccountOutput() ContactsAccountOutput {
	return i.ToContactsAccountOutputWithContext(context.Background())
}

func (i ContactsAccountArgs) ToContactsAccountOutputWithContext(ctx context.Context) ContactsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsAccountOutput)
}

func (i ContactsAccountArgs) ToContactsAccountPtrOutput() ContactsAccountPtrOutput {
	return i.ToContactsAccountPtrOutputWithContext(context.Background())
}

func (i ContactsAccountArgs) ToContactsAccountPtrOutputWithContext(ctx context.Context) ContactsAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsAccountOutput).ToContactsAccountPtrOutputWithContext(ctx)
}

// ContactsAccountPtrInput is an input type that accepts ContactsAccountArgs, ContactsAccountPtr and ContactsAccountPtrOutput values.
// You can construct a concrete instance of `ContactsAccountPtrInput` via:
//
//	        ContactsAccountArgs{...}
//
//	or:
//
//	        nil
type ContactsAccountPtrInput interface {
	pulumi.Input

	ToContactsAccountPtrOutput() ContactsAccountPtrOutput
	ToContactsAccountPtrOutputWithContext(context.Context) ContactsAccountPtrOutput
}

type contactsAccountPtrType ContactsAccountArgs

func ContactsAccountPtr(v *ContactsAccountArgs) ContactsAccountPtrInput {
	return (*contactsAccountPtrType)(v)
}

func (*contactsAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsAccount)(nil)).Elem()
}

func (i *contactsAccountPtrType) ToContactsAccountPtrOutput() ContactsAccountPtrOutput {
	return i.ToContactsAccountPtrOutputWithContext(context.Background())
}

func (i *contactsAccountPtrType) ToContactsAccountPtrOutputWithContext(ctx context.Context) ContactsAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsAccountPtrOutput)
}

type ContactsAccountOutput struct{ *pulumi.OutputState }

func (ContactsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsAccount)(nil)).Elem()
}

func (o ContactsAccountOutput) ToContactsAccountOutput() ContactsAccountOutput {
	return o
}

func (o ContactsAccountOutput) ToContactsAccountOutputWithContext(ctx context.Context) ContactsAccountOutput {
	return o
}

func (o ContactsAccountOutput) ToContactsAccountPtrOutput() ContactsAccountPtrOutput {
	return o.ToContactsAccountPtrOutputWithContext(context.Background())
}

func (o ContactsAccountOutput) ToContactsAccountPtrOutputWithContext(ctx context.Context) ContactsAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactsAccount) *ContactsAccount {
		return &v
	}).(ContactsAccountPtrOutput)
}

// Email address to send communications to
func (o ContactsAccountOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsAccount) string { return v.Email }).(pulumi.StringOutput)
}

type ContactsAccountPtrOutput struct{ *pulumi.OutputState }

func (ContactsAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsAccount)(nil)).Elem()
}

func (o ContactsAccountPtrOutput) ToContactsAccountPtrOutput() ContactsAccountPtrOutput {
	return o
}

func (o ContactsAccountPtrOutput) ToContactsAccountPtrOutputWithContext(ctx context.Context) ContactsAccountPtrOutput {
	return o
}

func (o ContactsAccountPtrOutput) Elem() ContactsAccountOutput {
	return o.ApplyT(func(v *ContactsAccount) ContactsAccount {
		if v != nil {
			return *v
		}
		var ret ContactsAccount
		return ret
	}).(ContactsAccountOutput)
}

// Email address to send communications to
func (o ContactsAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactsAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

type ContactsSecurity struct {
	// Email address to send communications to
	Email string `pulumi:"email"`
}

// ContactsSecurityInput is an input type that accepts ContactsSecurityArgs and ContactsSecurityOutput values.
// You can construct a concrete instance of `ContactsSecurityInput` via:
//
//	ContactsSecurityArgs{...}
type ContactsSecurityInput interface {
	pulumi.Input

	ToContactsSecurityOutput() ContactsSecurityOutput
	ToContactsSecurityOutputWithContext(context.Context) ContactsSecurityOutput
}

type ContactsSecurityArgs struct {
	// Email address to send communications to
	Email pulumi.StringInput `pulumi:"email"`
}

func (ContactsSecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsSecurity)(nil)).Elem()
}

func (i ContactsSecurityArgs) ToContactsSecurityOutput() ContactsSecurityOutput {
	return i.ToContactsSecurityOutputWithContext(context.Background())
}

func (i ContactsSecurityArgs) ToContactsSecurityOutputWithContext(ctx context.Context) ContactsSecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSecurityOutput)
}

func (i ContactsSecurityArgs) ToContactsSecurityPtrOutput() ContactsSecurityPtrOutput {
	return i.ToContactsSecurityPtrOutputWithContext(context.Background())
}

func (i ContactsSecurityArgs) ToContactsSecurityPtrOutputWithContext(ctx context.Context) ContactsSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSecurityOutput).ToContactsSecurityPtrOutputWithContext(ctx)
}

// ContactsSecurityPtrInput is an input type that accepts ContactsSecurityArgs, ContactsSecurityPtr and ContactsSecurityPtrOutput values.
// You can construct a concrete instance of `ContactsSecurityPtrInput` via:
//
//	        ContactsSecurityArgs{...}
//
//	or:
//
//	        nil
type ContactsSecurityPtrInput interface {
	pulumi.Input

	ToContactsSecurityPtrOutput() ContactsSecurityPtrOutput
	ToContactsSecurityPtrOutputWithContext(context.Context) ContactsSecurityPtrOutput
}

type contactsSecurityPtrType ContactsSecurityArgs

func ContactsSecurityPtr(v *ContactsSecurityArgs) ContactsSecurityPtrInput {
	return (*contactsSecurityPtrType)(v)
}

func (*contactsSecurityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsSecurity)(nil)).Elem()
}

func (i *contactsSecurityPtrType) ToContactsSecurityPtrOutput() ContactsSecurityPtrOutput {
	return i.ToContactsSecurityPtrOutputWithContext(context.Background())
}

func (i *contactsSecurityPtrType) ToContactsSecurityPtrOutputWithContext(ctx context.Context) ContactsSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSecurityPtrOutput)
}

type ContactsSecurityOutput struct{ *pulumi.OutputState }

func (ContactsSecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsSecurity)(nil)).Elem()
}

func (o ContactsSecurityOutput) ToContactsSecurityOutput() ContactsSecurityOutput {
	return o
}

func (o ContactsSecurityOutput) ToContactsSecurityOutputWithContext(ctx context.Context) ContactsSecurityOutput {
	return o
}

func (o ContactsSecurityOutput) ToContactsSecurityPtrOutput() ContactsSecurityPtrOutput {
	return o.ToContactsSecurityPtrOutputWithContext(context.Background())
}

func (o ContactsSecurityOutput) ToContactsSecurityPtrOutputWithContext(ctx context.Context) ContactsSecurityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactsSecurity) *ContactsSecurity {
		return &v
	}).(ContactsSecurityPtrOutput)
}

// Email address to send communications to
func (o ContactsSecurityOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsSecurity) string { return v.Email }).(pulumi.StringOutput)
}

type ContactsSecurityPtrOutput struct{ *pulumi.OutputState }

func (ContactsSecurityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsSecurity)(nil)).Elem()
}

func (o ContactsSecurityPtrOutput) ToContactsSecurityPtrOutput() ContactsSecurityPtrOutput {
	return o
}

func (o ContactsSecurityPtrOutput) ToContactsSecurityPtrOutputWithContext(ctx context.Context) ContactsSecurityPtrOutput {
	return o
}

func (o ContactsSecurityPtrOutput) Elem() ContactsSecurityOutput {
	return o.ApplyT(func(v *ContactsSecurity) ContactsSecurity {
		if v != nil {
			return *v
		}
		var ret ContactsSecurity
		return ret
	}).(ContactsSecurityOutput)
}

// Email address to send communications to
func (o ContactsSecurityPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactsSecurity) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

type ContactsSupport struct {
	// Email address to send communications to
	Email string `pulumi:"email"`
}

// ContactsSupportInput is an input type that accepts ContactsSupportArgs and ContactsSupportOutput values.
// You can construct a concrete instance of `ContactsSupportInput` via:
//
//	ContactsSupportArgs{...}
type ContactsSupportInput interface {
	pulumi.Input

	ToContactsSupportOutput() ContactsSupportOutput
	ToContactsSupportOutputWithContext(context.Context) ContactsSupportOutput
}

type ContactsSupportArgs struct {
	// Email address to send communications to
	Email pulumi.StringInput `pulumi:"email"`
}

func (ContactsSupportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsSupport)(nil)).Elem()
}

func (i ContactsSupportArgs) ToContactsSupportOutput() ContactsSupportOutput {
	return i.ToContactsSupportOutputWithContext(context.Background())
}

func (i ContactsSupportArgs) ToContactsSupportOutputWithContext(ctx context.Context) ContactsSupportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSupportOutput)
}

func (i ContactsSupportArgs) ToContactsSupportPtrOutput() ContactsSupportPtrOutput {
	return i.ToContactsSupportPtrOutputWithContext(context.Background())
}

func (i ContactsSupportArgs) ToContactsSupportPtrOutputWithContext(ctx context.Context) ContactsSupportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSupportOutput).ToContactsSupportPtrOutputWithContext(ctx)
}

// ContactsSupportPtrInput is an input type that accepts ContactsSupportArgs, ContactsSupportPtr and ContactsSupportPtrOutput values.
// You can construct a concrete instance of `ContactsSupportPtrInput` via:
//
//	        ContactsSupportArgs{...}
//
//	or:
//
//	        nil
type ContactsSupportPtrInput interface {
	pulumi.Input

	ToContactsSupportPtrOutput() ContactsSupportPtrOutput
	ToContactsSupportPtrOutputWithContext(context.Context) ContactsSupportPtrOutput
}

type contactsSupportPtrType ContactsSupportArgs

func ContactsSupportPtr(v *ContactsSupportArgs) ContactsSupportPtrInput {
	return (*contactsSupportPtrType)(v)
}

func (*contactsSupportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsSupport)(nil)).Elem()
}

func (i *contactsSupportPtrType) ToContactsSupportPtrOutput() ContactsSupportPtrOutput {
	return i.ToContactsSupportPtrOutputWithContext(context.Background())
}

func (i *contactsSupportPtrType) ToContactsSupportPtrOutputWithContext(ctx context.Context) ContactsSupportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactsSupportPtrOutput)
}

type ContactsSupportOutput struct{ *pulumi.OutputState }

func (ContactsSupportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactsSupport)(nil)).Elem()
}

func (o ContactsSupportOutput) ToContactsSupportOutput() ContactsSupportOutput {
	return o
}

func (o ContactsSupportOutput) ToContactsSupportOutputWithContext(ctx context.Context) ContactsSupportOutput {
	return o
}

func (o ContactsSupportOutput) ToContactsSupportPtrOutput() ContactsSupportPtrOutput {
	return o.ToContactsSupportPtrOutputWithContext(context.Background())
}

func (o ContactsSupportOutput) ToContactsSupportPtrOutputWithContext(ctx context.Context) ContactsSupportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactsSupport) *ContactsSupport {
		return &v
	}).(ContactsSupportPtrOutput)
}

// Email address to send communications to
func (o ContactsSupportOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ContactsSupport) string { return v.Email }).(pulumi.StringOutput)
}

type ContactsSupportPtrOutput struct{ *pulumi.OutputState }

func (ContactsSupportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactsSupport)(nil)).Elem()
}

func (o ContactsSupportPtrOutput) ToContactsSupportPtrOutput() ContactsSupportPtrOutput {
	return o
}

func (o ContactsSupportPtrOutput) ToContactsSupportPtrOutputWithContext(ctx context.Context) ContactsSupportPtrOutput {
	return o
}

func (o ContactsSupportPtrOutput) Elem() ContactsSupportOutput {
	return o.ApplyT(func(v *ContactsSupport) ContactsSupport {
		if v != nil {
			return *v
		}
		var ret ContactsSupport
		return ret
	}).(ContactsSupportOutput)
}

// Email address to send communications to
func (o ContactsSupportPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactsSupport) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

type DnsConfigurationNameserver struct {
	// The nameserver's IPv4 or IPv6 address
	Address string `pulumi:"address"`
	// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
	UseWithExitNode *bool `pulumi:"useWithExitNode"`
}

// DnsConfigurationNameserverInput is an input type that accepts DnsConfigurationNameserverArgs and DnsConfigurationNameserverOutput values.
// You can construct a concrete instance of `DnsConfigurationNameserverInput` via:
//
//	DnsConfigurationNameserverArgs{...}
type DnsConfigurationNameserverInput interface {
	pulumi.Input

	ToDnsConfigurationNameserverOutput() DnsConfigurationNameserverOutput
	ToDnsConfigurationNameserverOutputWithContext(context.Context) DnsConfigurationNameserverOutput
}

type DnsConfigurationNameserverArgs struct {
	// The nameserver's IPv4 or IPv6 address
	Address pulumi.StringInput `pulumi:"address"`
	// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
	UseWithExitNode pulumi.BoolPtrInput `pulumi:"useWithExitNode"`
}

func (DnsConfigurationNameserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationNameserver)(nil)).Elem()
}

func (i DnsConfigurationNameserverArgs) ToDnsConfigurationNameserverOutput() DnsConfigurationNameserverOutput {
	return i.ToDnsConfigurationNameserverOutputWithContext(context.Background())
}

func (i DnsConfigurationNameserverArgs) ToDnsConfigurationNameserverOutputWithContext(ctx context.Context) DnsConfigurationNameserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationNameserverOutput)
}

// DnsConfigurationNameserverArrayInput is an input type that accepts DnsConfigurationNameserverArray and DnsConfigurationNameserverArrayOutput values.
// You can construct a concrete instance of `DnsConfigurationNameserverArrayInput` via:
//
//	DnsConfigurationNameserverArray{ DnsConfigurationNameserverArgs{...} }
type DnsConfigurationNameserverArrayInput interface {
	pulumi.Input

	ToDnsConfigurationNameserverArrayOutput() DnsConfigurationNameserverArrayOutput
	ToDnsConfigurationNameserverArrayOutputWithContext(context.Context) DnsConfigurationNameserverArrayOutput
}

type DnsConfigurationNameserverArray []DnsConfigurationNameserverInput

func (DnsConfigurationNameserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationNameserver)(nil)).Elem()
}

func (i DnsConfigurationNameserverArray) ToDnsConfigurationNameserverArrayOutput() DnsConfigurationNameserverArrayOutput {
	return i.ToDnsConfigurationNameserverArrayOutputWithContext(context.Background())
}

func (i DnsConfigurationNameserverArray) ToDnsConfigurationNameserverArrayOutputWithContext(ctx context.Context) DnsConfigurationNameserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationNameserverArrayOutput)
}

type DnsConfigurationNameserverOutput struct{ *pulumi.OutputState }

func (DnsConfigurationNameserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationNameserver)(nil)).Elem()
}

func (o DnsConfigurationNameserverOutput) ToDnsConfigurationNameserverOutput() DnsConfigurationNameserverOutput {
	return o
}

func (o DnsConfigurationNameserverOutput) ToDnsConfigurationNameserverOutputWithContext(ctx context.Context) DnsConfigurationNameserverOutput {
	return o
}

// The nameserver's IPv4 or IPv6 address
func (o DnsConfigurationNameserverOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DnsConfigurationNameserver) string { return v.Address }).(pulumi.StringOutput)
}

// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
func (o DnsConfigurationNameserverOutput) UseWithExitNode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsConfigurationNameserver) *bool { return v.UseWithExitNode }).(pulumi.BoolPtrOutput)
}

type DnsConfigurationNameserverArrayOutput struct{ *pulumi.OutputState }

func (DnsConfigurationNameserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationNameserver)(nil)).Elem()
}

func (o DnsConfigurationNameserverArrayOutput) ToDnsConfigurationNameserverArrayOutput() DnsConfigurationNameserverArrayOutput {
	return o
}

func (o DnsConfigurationNameserverArrayOutput) ToDnsConfigurationNameserverArrayOutputWithContext(ctx context.Context) DnsConfigurationNameserverArrayOutput {
	return o
}

func (o DnsConfigurationNameserverArrayOutput) Index(i pulumi.IntInput) DnsConfigurationNameserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsConfigurationNameserver {
		return vs[0].([]DnsConfigurationNameserver)[vs[1].(int)]
	}).(DnsConfigurationNameserverOutput)
}

type DnsConfigurationSplitDn struct {
	// The nameservers will be used only for this domain.
	Domain string `pulumi:"domain"`
	// Set the nameservers used by devices on your network to resolve DNS queries.
	Nameservers []DnsConfigurationSplitDnNameserver `pulumi:"nameservers"`
}

// DnsConfigurationSplitDnInput is an input type that accepts DnsConfigurationSplitDnArgs and DnsConfigurationSplitDnOutput values.
// You can construct a concrete instance of `DnsConfigurationSplitDnInput` via:
//
//	DnsConfigurationSplitDnArgs{...}
type DnsConfigurationSplitDnInput interface {
	pulumi.Input

	ToDnsConfigurationSplitDnOutput() DnsConfigurationSplitDnOutput
	ToDnsConfigurationSplitDnOutputWithContext(context.Context) DnsConfigurationSplitDnOutput
}

type DnsConfigurationSplitDnArgs struct {
	// The nameservers will be used only for this domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Set the nameservers used by devices on your network to resolve DNS queries.
	Nameservers DnsConfigurationSplitDnNameserverArrayInput `pulumi:"nameservers"`
}

func (DnsConfigurationSplitDnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationSplitDn)(nil)).Elem()
}

func (i DnsConfigurationSplitDnArgs) ToDnsConfigurationSplitDnOutput() DnsConfigurationSplitDnOutput {
	return i.ToDnsConfigurationSplitDnOutputWithContext(context.Background())
}

func (i DnsConfigurationSplitDnArgs) ToDnsConfigurationSplitDnOutputWithContext(ctx context.Context) DnsConfigurationSplitDnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationSplitDnOutput)
}

// DnsConfigurationSplitDnArrayInput is an input type that accepts DnsConfigurationSplitDnArray and DnsConfigurationSplitDnArrayOutput values.
// You can construct a concrete instance of `DnsConfigurationSplitDnArrayInput` via:
//
//	DnsConfigurationSplitDnArray{ DnsConfigurationSplitDnArgs{...} }
type DnsConfigurationSplitDnArrayInput interface {
	pulumi.Input

	ToDnsConfigurationSplitDnArrayOutput() DnsConfigurationSplitDnArrayOutput
	ToDnsConfigurationSplitDnArrayOutputWithContext(context.Context) DnsConfigurationSplitDnArrayOutput
}

type DnsConfigurationSplitDnArray []DnsConfigurationSplitDnInput

func (DnsConfigurationSplitDnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationSplitDn)(nil)).Elem()
}

func (i DnsConfigurationSplitDnArray) ToDnsConfigurationSplitDnArrayOutput() DnsConfigurationSplitDnArrayOutput {
	return i.ToDnsConfigurationSplitDnArrayOutputWithContext(context.Background())
}

func (i DnsConfigurationSplitDnArray) ToDnsConfigurationSplitDnArrayOutputWithContext(ctx context.Context) DnsConfigurationSplitDnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationSplitDnArrayOutput)
}

type DnsConfigurationSplitDnOutput struct{ *pulumi.OutputState }

func (DnsConfigurationSplitDnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationSplitDn)(nil)).Elem()
}

func (o DnsConfigurationSplitDnOutput) ToDnsConfigurationSplitDnOutput() DnsConfigurationSplitDnOutput {
	return o
}

func (o DnsConfigurationSplitDnOutput) ToDnsConfigurationSplitDnOutputWithContext(ctx context.Context) DnsConfigurationSplitDnOutput {
	return o
}

// The nameservers will be used only for this domain.
func (o DnsConfigurationSplitDnOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DnsConfigurationSplitDn) string { return v.Domain }).(pulumi.StringOutput)
}

// Set the nameservers used by devices on your network to resolve DNS queries.
func (o DnsConfigurationSplitDnOutput) Nameservers() DnsConfigurationSplitDnNameserverArrayOutput {
	return o.ApplyT(func(v DnsConfigurationSplitDn) []DnsConfigurationSplitDnNameserver { return v.Nameservers }).(DnsConfigurationSplitDnNameserverArrayOutput)
}

type DnsConfigurationSplitDnArrayOutput struct{ *pulumi.OutputState }

func (DnsConfigurationSplitDnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationSplitDn)(nil)).Elem()
}

func (o DnsConfigurationSplitDnArrayOutput) ToDnsConfigurationSplitDnArrayOutput() DnsConfigurationSplitDnArrayOutput {
	return o
}

func (o DnsConfigurationSplitDnArrayOutput) ToDnsConfigurationSplitDnArrayOutputWithContext(ctx context.Context) DnsConfigurationSplitDnArrayOutput {
	return o
}

func (o DnsConfigurationSplitDnArrayOutput) Index(i pulumi.IntInput) DnsConfigurationSplitDnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsConfigurationSplitDn {
		return vs[0].([]DnsConfigurationSplitDn)[vs[1].(int)]
	}).(DnsConfigurationSplitDnOutput)
}

type DnsConfigurationSplitDnNameserver struct {
	// The nameserver's IPv4 or IPv6 address.
	Address string `pulumi:"address"`
	// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
	UseWithExitNode *bool `pulumi:"useWithExitNode"`
}

// DnsConfigurationSplitDnNameserverInput is an input type that accepts DnsConfigurationSplitDnNameserverArgs and DnsConfigurationSplitDnNameserverOutput values.
// You can construct a concrete instance of `DnsConfigurationSplitDnNameserverInput` via:
//
//	DnsConfigurationSplitDnNameserverArgs{...}
type DnsConfigurationSplitDnNameserverInput interface {
	pulumi.Input

	ToDnsConfigurationSplitDnNameserverOutput() DnsConfigurationSplitDnNameserverOutput
	ToDnsConfigurationSplitDnNameserverOutputWithContext(context.Context) DnsConfigurationSplitDnNameserverOutput
}

type DnsConfigurationSplitDnNameserverArgs struct {
	// The nameserver's IPv4 or IPv6 address.
	Address pulumi.StringInput `pulumi:"address"`
	// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
	UseWithExitNode pulumi.BoolPtrInput `pulumi:"useWithExitNode"`
}

func (DnsConfigurationSplitDnNameserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationSplitDnNameserver)(nil)).Elem()
}

func (i DnsConfigurationSplitDnNameserverArgs) ToDnsConfigurationSplitDnNameserverOutput() DnsConfigurationSplitDnNameserverOutput {
	return i.ToDnsConfigurationSplitDnNameserverOutputWithContext(context.Background())
}

func (i DnsConfigurationSplitDnNameserverArgs) ToDnsConfigurationSplitDnNameserverOutputWithContext(ctx context.Context) DnsConfigurationSplitDnNameserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationSplitDnNameserverOutput)
}

// DnsConfigurationSplitDnNameserverArrayInput is an input type that accepts DnsConfigurationSplitDnNameserverArray and DnsConfigurationSplitDnNameserverArrayOutput values.
// You can construct a concrete instance of `DnsConfigurationSplitDnNameserverArrayInput` via:
//
//	DnsConfigurationSplitDnNameserverArray{ DnsConfigurationSplitDnNameserverArgs{...} }
type DnsConfigurationSplitDnNameserverArrayInput interface {
	pulumi.Input

	ToDnsConfigurationSplitDnNameserverArrayOutput() DnsConfigurationSplitDnNameserverArrayOutput
	ToDnsConfigurationSplitDnNameserverArrayOutputWithContext(context.Context) DnsConfigurationSplitDnNameserverArrayOutput
}

type DnsConfigurationSplitDnNameserverArray []DnsConfigurationSplitDnNameserverInput

func (DnsConfigurationSplitDnNameserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationSplitDnNameserver)(nil)).Elem()
}

func (i DnsConfigurationSplitDnNameserverArray) ToDnsConfigurationSplitDnNameserverArrayOutput() DnsConfigurationSplitDnNameserverArrayOutput {
	return i.ToDnsConfigurationSplitDnNameserverArrayOutputWithContext(context.Background())
}

func (i DnsConfigurationSplitDnNameserverArray) ToDnsConfigurationSplitDnNameserverArrayOutputWithContext(ctx context.Context) DnsConfigurationSplitDnNameserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationSplitDnNameserverArrayOutput)
}

type DnsConfigurationSplitDnNameserverOutput struct{ *pulumi.OutputState }

func (DnsConfigurationSplitDnNameserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationSplitDnNameserver)(nil)).Elem()
}

func (o DnsConfigurationSplitDnNameserverOutput) ToDnsConfigurationSplitDnNameserverOutput() DnsConfigurationSplitDnNameserverOutput {
	return o
}

func (o DnsConfigurationSplitDnNameserverOutput) ToDnsConfigurationSplitDnNameserverOutputWithContext(ctx context.Context) DnsConfigurationSplitDnNameserverOutput {
	return o
}

// The nameserver's IPv4 or IPv6 address.
func (o DnsConfigurationSplitDnNameserverOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DnsConfigurationSplitDnNameserver) string { return v.Address }).(pulumi.StringOutput)
}

// This nameserver will continue to be used when an exit node is selected (requires Tailscale v1.88.1 or later). Defaults to false.
func (o DnsConfigurationSplitDnNameserverOutput) UseWithExitNode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsConfigurationSplitDnNameserver) *bool { return v.UseWithExitNode }).(pulumi.BoolPtrOutput)
}

type DnsConfigurationSplitDnNameserverArrayOutput struct{ *pulumi.OutputState }

func (DnsConfigurationSplitDnNameserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsConfigurationSplitDnNameserver)(nil)).Elem()
}

func (o DnsConfigurationSplitDnNameserverArrayOutput) ToDnsConfigurationSplitDnNameserverArrayOutput() DnsConfigurationSplitDnNameserverArrayOutput {
	return o
}

func (o DnsConfigurationSplitDnNameserverArrayOutput) ToDnsConfigurationSplitDnNameserverArrayOutputWithContext(ctx context.Context) DnsConfigurationSplitDnNameserverArrayOutput {
	return o
}

func (o DnsConfigurationSplitDnNameserverArrayOutput) Index(i pulumi.IntInput) DnsConfigurationSplitDnNameserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsConfigurationSplitDnNameserver {
		return vs[0].([]DnsConfigurationSplitDnNameserver)[vs[1].(int)]
	}).(DnsConfigurationSplitDnNameserverOutput)
}

type GetDevicesDevice struct {
	// The list of device's IPs
	Addresses []string `pulumi:"addresses"`
	// The short hostname of the device
	Hostname string `pulumi:"hostname"`
	// The legacy identifier of the device. Use nodeId instead for new resources.
	Id string `pulumi:"id"`
	// The full name of the device (e.g. `hostname.domain.ts.net`)
	Name string `pulumi:"name"`
	// The preferred indentifier for a device.
	NodeId string `pulumi:"nodeId"`
	// The tags applied to the device
	Tags []string `pulumi:"tags"`
	// The user associated with the device
	User string `pulumi:"user"`
}

// GetDevicesDeviceInput is an input type that accepts GetDevicesDeviceArgs and GetDevicesDeviceOutput values.
// You can construct a concrete instance of `GetDevicesDeviceInput` via:
//
//	GetDevicesDeviceArgs{...}
type GetDevicesDeviceInput interface {
	pulumi.Input

	ToGetDevicesDeviceOutput() GetDevicesDeviceOutput
	ToGetDevicesDeviceOutputWithContext(context.Context) GetDevicesDeviceOutput
}

type GetDevicesDeviceArgs struct {
	// The list of device's IPs
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// The short hostname of the device
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The legacy identifier of the device. Use nodeId instead for new resources.
	Id pulumi.StringInput `pulumi:"id"`
	// The full name of the device (e.g. `hostname.domain.ts.net`)
	Name pulumi.StringInput `pulumi:"name"`
	// The preferred indentifier for a device.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The tags applied to the device
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The user associated with the device
	User pulumi.StringInput `pulumi:"user"`
}

func (GetDevicesDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevicesDevice)(nil)).Elem()
}

func (i GetDevicesDeviceArgs) ToGetDevicesDeviceOutput() GetDevicesDeviceOutput {
	return i.ToGetDevicesDeviceOutputWithContext(context.Background())
}

func (i GetDevicesDeviceArgs) ToGetDevicesDeviceOutputWithContext(ctx context.Context) GetDevicesDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevicesDeviceOutput)
}

// GetDevicesDeviceArrayInput is an input type that accepts GetDevicesDeviceArray and GetDevicesDeviceArrayOutput values.
// You can construct a concrete instance of `GetDevicesDeviceArrayInput` via:
//
//	GetDevicesDeviceArray{ GetDevicesDeviceArgs{...} }
type GetDevicesDeviceArrayInput interface {
	pulumi.Input

	ToGetDevicesDeviceArrayOutput() GetDevicesDeviceArrayOutput
	ToGetDevicesDeviceArrayOutputWithContext(context.Context) GetDevicesDeviceArrayOutput
}

type GetDevicesDeviceArray []GetDevicesDeviceInput

func (GetDevicesDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDevicesDevice)(nil)).Elem()
}

func (i GetDevicesDeviceArray) ToGetDevicesDeviceArrayOutput() GetDevicesDeviceArrayOutput {
	return i.ToGetDevicesDeviceArrayOutputWithContext(context.Background())
}

func (i GetDevicesDeviceArray) ToGetDevicesDeviceArrayOutputWithContext(ctx context.Context) GetDevicesDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDevicesDeviceArrayOutput)
}

type GetDevicesDeviceOutput struct{ *pulumi.OutputState }

func (GetDevicesDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDevicesDevice)(nil)).Elem()
}

func (o GetDevicesDeviceOutput) ToGetDevicesDeviceOutput() GetDevicesDeviceOutput {
	return o
}

func (o GetDevicesDeviceOutput) ToGetDevicesDeviceOutputWithContext(ctx context.Context) GetDevicesDeviceOutput {
	return o
}

// The list of device's IPs
func (o GetDevicesDeviceOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDevicesDevice) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// The short hostname of the device
func (o GetDevicesDeviceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesDevice) string { return v.Hostname }).(pulumi.StringOutput)
}

// The legacy identifier of the device. Use nodeId instead for new resources.
func (o GetDevicesDeviceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesDevice) string { return v.Id }).(pulumi.StringOutput)
}

// The full name of the device (e.g. `hostname.domain.ts.net`)
func (o GetDevicesDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesDevice) string { return v.Name }).(pulumi.StringOutput)
}

// The preferred indentifier for a device.
func (o GetDevicesDeviceOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesDevice) string { return v.NodeId }).(pulumi.StringOutput)
}

// The tags applied to the device
func (o GetDevicesDeviceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDevicesDevice) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The user associated with the device
func (o GetDevicesDeviceOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v GetDevicesDevice) string { return v.User }).(pulumi.StringOutput)
}

type GetDevicesDeviceArrayOutput struct{ *pulumi.OutputState }

func (GetDevicesDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDevicesDevice)(nil)).Elem()
}

func (o GetDevicesDeviceArrayOutput) ToGetDevicesDeviceArrayOutput() GetDevicesDeviceArrayOutput {
	return o
}

func (o GetDevicesDeviceArrayOutput) ToGetDevicesDeviceArrayOutputWithContext(ctx context.Context) GetDevicesDeviceArrayOutput {
	return o
}

func (o GetDevicesDeviceArrayOutput) Index(i pulumi.IntInput) GetDevicesDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDevicesDevice {
		return vs[0].([]GetDevicesDevice)[vs[1].(int)]
	}).(GetDevicesDeviceOutput)
}

type GetUsersUser struct {
	// The time the user joined their tailnet.
	Created string `pulumi:"created"`
	// true when the user has a node currently connected to the control server.
	CurrentlyConnected bool `pulumi:"currentlyConnected"`
	// Number of devices the user owns.
	DeviceCount int `pulumi:"deviceCount"`
	// The name of the user.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier for the user.
	Id string `pulumi:"id"`
	// The later of either: a) The last time any of the user's nodes were connected to the network or b) The last time the user authenticated to any tailscale service, including the admin panel.
	LastSeen string `pulumi:"lastSeen"`
	// The emailish login name of the user.
	LoginName string `pulumi:"loginName"`
	// The profile pic URL for the user.
	ProfilePicUrl string `pulumi:"profilePicUrl"`
	// The role of the user.
	Role string `pulumi:"role"`
	// The status of the user.
	Status string `pulumi:"status"`
	// The tailnet that owns the user.
	TailnetId string `pulumi:"tailnetId"`
	// The type of relation this user has to the tailnet associated with the request.
	Type string `pulumi:"type"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The time the user joined their tailnet.
	Created pulumi.StringInput `pulumi:"created"`
	// true when the user has a node currently connected to the control server.
	CurrentlyConnected pulumi.BoolInput `pulumi:"currentlyConnected"`
	// Number of devices the user owns.
	DeviceCount pulumi.IntInput `pulumi:"deviceCount"`
	// The name of the user.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier for the user.
	Id pulumi.StringInput `pulumi:"id"`
	// The later of either: a) The last time any of the user's nodes were connected to the network or b) The last time the user authenticated to any tailscale service, including the admin panel.
	LastSeen pulumi.StringInput `pulumi:"lastSeen"`
	// The emailish login name of the user.
	LoginName pulumi.StringInput `pulumi:"loginName"`
	// The profile pic URL for the user.
	ProfilePicUrl pulumi.StringInput `pulumi:"profilePicUrl"`
	// The role of the user.
	Role pulumi.StringInput `pulumi:"role"`
	// The status of the user.
	Status pulumi.StringInput `pulumi:"status"`
	// The tailnet that owns the user.
	TailnetId pulumi.StringInput `pulumi:"tailnetId"`
	// The type of relation this user has to the tailnet associated with the request.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The time the user joined their tailnet.
func (o GetUsersUserOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Created }).(pulumi.StringOutput)
}

// true when the user has a node currently connected to the control server.
func (o GetUsersUserOutput) CurrentlyConnected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.CurrentlyConnected }).(pulumi.BoolOutput)
}

// Number of devices the user owns.
func (o GetUsersUserOutput) DeviceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.DeviceCount }).(pulumi.IntOutput)
}

// The name of the user.
func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier for the user.
func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// The later of either: a) The last time any of the user's nodes were connected to the network or b) The last time the user authenticated to any tailscale service, including the admin panel.
func (o GetUsersUserOutput) LastSeen() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastSeen }).(pulumi.StringOutput)
}

// The emailish login name of the user.
func (o GetUsersUserOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LoginName }).(pulumi.StringOutput)
}

// The profile pic URL for the user.
func (o GetUsersUserOutput) ProfilePicUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ProfilePicUrl }).(pulumi.StringOutput)
}

// The role of the user.
func (o GetUsersUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Role }).(pulumi.StringOutput)
}

// The status of the user.
func (o GetUsersUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Status }).(pulumi.StringOutput)
}

// The tailnet that owns the user.
func (o GetUsersUserOutput) TailnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.TailnetId }).(pulumi.StringOutput)
}

// The type of relation this user has to the tailnet associated with the request.
func (o GetUsersUserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsAccountInput)(nil)).Elem(), ContactsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsAccountPtrInput)(nil)).Elem(), ContactsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsSecurityInput)(nil)).Elem(), ContactsSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsSecurityPtrInput)(nil)).Elem(), ContactsSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsSupportInput)(nil)).Elem(), ContactsSupportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactsSupportPtrInput)(nil)).Elem(), ContactsSupportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationNameserverInput)(nil)).Elem(), DnsConfigurationNameserverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationNameserverArrayInput)(nil)).Elem(), DnsConfigurationNameserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationSplitDnInput)(nil)).Elem(), DnsConfigurationSplitDnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationSplitDnArrayInput)(nil)).Elem(), DnsConfigurationSplitDnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationSplitDnNameserverInput)(nil)).Elem(), DnsConfigurationSplitDnNameserverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsConfigurationSplitDnNameserverArrayInput)(nil)).Elem(), DnsConfigurationSplitDnNameserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDevicesDeviceInput)(nil)).Elem(), GetDevicesDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDevicesDeviceArrayInput)(nil)).Elem(), GetDevicesDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(ContactsAccountOutput{})
	pulumi.RegisterOutputType(ContactsAccountPtrOutput{})
	pulumi.RegisterOutputType(ContactsSecurityOutput{})
	pulumi.RegisterOutputType(ContactsSecurityPtrOutput{})
	pulumi.RegisterOutputType(ContactsSupportOutput{})
	pulumi.RegisterOutputType(ContactsSupportPtrOutput{})
	pulumi.RegisterOutputType(DnsConfigurationNameserverOutput{})
	pulumi.RegisterOutputType(DnsConfigurationNameserverArrayOutput{})
	pulumi.RegisterOutputType(DnsConfigurationSplitDnOutput{})
	pulumi.RegisterOutputType(DnsConfigurationSplitDnArrayOutput{})
	pulumi.RegisterOutputType(DnsConfigurationSplitDnNameserverOutput{})
	pulumi.RegisterOutputType(DnsConfigurationSplitDnNameserverArrayOutput{})
	pulumi.RegisterOutputType(GetDevicesDeviceOutput{})
	pulumi.RegisterOutputType(GetDevicesDeviceArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
