// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tailscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The logstreamConfiguration resource allows you to configure streaming configuration or network flow logs to a supported security information and event management (SIEM) system. See https://tailscale.com/kb/1255/log-streaming for more information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tailscale/sdk/go/tailscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Example configuration for a non-S3 logstreaming endpoint
//			_, err := tailscale.NewLogstreamConfiguration(ctx, "sample_logstream_configuration", &tailscale.LogstreamConfigurationArgs{
//				LogType:         pulumi.String("configuration"),
//				DestinationType: pulumi.String("panther"),
//				Url:             pulumi.String("https://example.com"),
//				Token:           pulumi.String("some-token"),
//			})
//			if err != nil {
//				return err
//			}
//			// Example configuration for an AWS S3 logstreaming endpoint
//			_, err = tailscale.NewLogstreamConfiguration(ctx, "sample_logstream_configuration_s3", &tailscale.LogstreamConfigurationArgs{
//				LogType:              pulumi.String("configuration"),
//				DestinationType:      pulumi.String("s3"),
//				S3Bucket:             pulumi.Any(tailscaleLogs.Id),
//				S3Region:             pulumi.String("us-west-2"),
//				S3AuthenticationType: pulumi.String("rolearn"),
//				S3RoleArn:            pulumi.Any(tailscaleLogsWriter.Arn),
//				S3ExternalId:         pulumi.Any(prod.ExternalId),
//			})
//			if err != nil {
//				return err
//			}
//			// Example configuration for an S3-compatible logstreaming endpoint
//			_, err = tailscale.NewLogstreamConfiguration(ctx, "sample_logstream_configuration_s3_compatible", &tailscale.LogstreamConfigurationArgs{
//				LogType:              pulumi.String("configuration"),
//				DestinationType:      pulumi.String("s3"),
//				Url:                  pulumi.String("https://s3.example.com"),
//				S3Bucket:             pulumi.String("example-bucket"),
//				S3Region:             pulumi.String("us-west-2"),
//				S3AuthenticationType: pulumi.String("accesskey"),
//				S3AccessKeyId:        pulumi.String("some-access-key"),
//				S3SecretAccessKey:    pulumi.String("some-secret-key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logstream configuration can be imported using the logstream configuration id, e.g.,
//
// ```sh
// $ pulumi import tailscale:index/logstreamConfiguration:LogstreamConfiguration sample_logstream_configuration 123456789
// ```
type LogstreamConfiguration struct {
	pulumi.CustomResourceState

	// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
	CompressionFormat pulumi.StringPtrOutput `pulumi:"compressionFormat"`
	// The type of system to which logs are being streamed.
	DestinationType pulumi.StringOutput `pulumi:"destinationType"`
	// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
	LogType pulumi.StringOutput `pulumi:"logType"`
	// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
	S3AccessKeyId pulumi.StringPtrOutput `pulumi:"s3AccessKeyId"`
	// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
	S3AuthenticationType pulumi.StringPtrOutput `pulumi:"s3AuthenticationType"`
	// The S3 bucket name. Required if destinationType is 's3'.
	S3Bucket pulumi.StringPtrOutput `pulumi:"s3Bucket"`
	// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
	S3ExternalId pulumi.StringPtrOutput `pulumi:"s3ExternalId"`
	// An optional S3 key prefix to prepend to the auto-generated S3 key name.
	S3KeyPrefix pulumi.StringPtrOutput `pulumi:"s3KeyPrefix"`
	// The region in which the S3 bucket is located. Required if destinationType is 's3'.
	S3Region pulumi.StringPtrOutput `pulumi:"s3Region"`
	// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
	S3RoleArn pulumi.StringPtrOutput `pulumi:"s3RoleArn"`
	// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
	S3SecretAccessKey pulumi.StringPtrOutput `pulumi:"s3SecretAccessKey"`
	// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
	UploadPeriodMinutes pulumi.IntPtrOutput `pulumi:"uploadPeriodMinutes"`
	// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewLogstreamConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLogstreamConfiguration(ctx *pulumi.Context,
	name string, args *LogstreamConfigurationArgs, opts ...pulumi.ResourceOption) (*LogstreamConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationType == nil {
		return nil, errors.New("invalid value for required argument 'DestinationType'")
	}
	if args.LogType == nil {
		return nil, errors.New("invalid value for required argument 'LogType'")
	}
	if args.S3SecretAccessKey != nil {
		args.S3SecretAccessKey = pulumi.ToSecret(args.S3SecretAccessKey).(pulumi.StringPtrInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"s3SecretAccessKey",
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogstreamConfiguration
	err := ctx.RegisterResource("tailscale:index/logstreamConfiguration:LogstreamConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstreamConfiguration gets an existing LogstreamConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstreamConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstreamConfigurationState, opts ...pulumi.ResourceOption) (*LogstreamConfiguration, error) {
	var resource LogstreamConfiguration
	err := ctx.ReadResource("tailscale:index/logstreamConfiguration:LogstreamConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogstreamConfiguration resources.
type logstreamConfigurationState struct {
	// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// The type of system to which logs are being streamed.
	DestinationType *string `pulumi:"destinationType"`
	// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
	LogType *string `pulumi:"logType"`
	// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
	S3AccessKeyId *string `pulumi:"s3AccessKeyId"`
	// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
	S3AuthenticationType *string `pulumi:"s3AuthenticationType"`
	// The S3 bucket name. Required if destinationType is 's3'.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
	S3ExternalId *string `pulumi:"s3ExternalId"`
	// An optional S3 key prefix to prepend to the auto-generated S3 key name.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
	// The region in which the S3 bucket is located. Required if destinationType is 's3'.
	S3Region *string `pulumi:"s3Region"`
	// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
	S3RoleArn *string `pulumi:"s3RoleArn"`
	// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
	S3SecretAccessKey *string `pulumi:"s3SecretAccessKey"`
	// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
	Token *string `pulumi:"token"`
	// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
	UploadPeriodMinutes *int `pulumi:"uploadPeriodMinutes"`
	// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
	Url *string `pulumi:"url"`
	// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
	User *string `pulumi:"user"`
}

type LogstreamConfigurationState struct {
	// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
	CompressionFormat pulumi.StringPtrInput
	// The type of system to which logs are being streamed.
	DestinationType pulumi.StringPtrInput
	// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
	LogType pulumi.StringPtrInput
	// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
	S3AccessKeyId pulumi.StringPtrInput
	// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
	S3AuthenticationType pulumi.StringPtrInput
	// The S3 bucket name. Required if destinationType is 's3'.
	S3Bucket pulumi.StringPtrInput
	// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
	S3ExternalId pulumi.StringPtrInput
	// An optional S3 key prefix to prepend to the auto-generated S3 key name.
	S3KeyPrefix pulumi.StringPtrInput
	// The region in which the S3 bucket is located. Required if destinationType is 's3'.
	S3Region pulumi.StringPtrInput
	// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
	S3RoleArn pulumi.StringPtrInput
	// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
	S3SecretAccessKey pulumi.StringPtrInput
	// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
	Token pulumi.StringPtrInput
	// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
	UploadPeriodMinutes pulumi.IntPtrInput
	// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
	Url pulumi.StringPtrInput
	// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
	User pulumi.StringPtrInput
}

func (LogstreamConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstreamConfigurationState)(nil)).Elem()
}

type logstreamConfigurationArgs struct {
	// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
	CompressionFormat *string `pulumi:"compressionFormat"`
	// The type of system to which logs are being streamed.
	DestinationType string `pulumi:"destinationType"`
	// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
	LogType string `pulumi:"logType"`
	// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
	S3AccessKeyId *string `pulumi:"s3AccessKeyId"`
	// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
	S3AuthenticationType *string `pulumi:"s3AuthenticationType"`
	// The S3 bucket name. Required if destinationType is 's3'.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
	S3ExternalId *string `pulumi:"s3ExternalId"`
	// An optional S3 key prefix to prepend to the auto-generated S3 key name.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
	// The region in which the S3 bucket is located. Required if destinationType is 's3'.
	S3Region *string `pulumi:"s3Region"`
	// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
	S3RoleArn *string `pulumi:"s3RoleArn"`
	// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
	S3SecretAccessKey *string `pulumi:"s3SecretAccessKey"`
	// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
	Token *string `pulumi:"token"`
	// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
	UploadPeriodMinutes *int `pulumi:"uploadPeriodMinutes"`
	// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
	Url *string `pulumi:"url"`
	// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a LogstreamConfiguration resource.
type LogstreamConfigurationArgs struct {
	// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
	CompressionFormat pulumi.StringPtrInput
	// The type of system to which logs are being streamed.
	DestinationType pulumi.StringInput
	// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
	LogType pulumi.StringInput
	// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
	S3AccessKeyId pulumi.StringPtrInput
	// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
	S3AuthenticationType pulumi.StringPtrInput
	// The S3 bucket name. Required if destinationType is 's3'.
	S3Bucket pulumi.StringPtrInput
	// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
	S3ExternalId pulumi.StringPtrInput
	// An optional S3 key prefix to prepend to the auto-generated S3 key name.
	S3KeyPrefix pulumi.StringPtrInput
	// The region in which the S3 bucket is located. Required if destinationType is 's3'.
	S3Region pulumi.StringPtrInput
	// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
	S3RoleArn pulumi.StringPtrInput
	// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
	S3SecretAccessKey pulumi.StringPtrInput
	// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
	Token pulumi.StringPtrInput
	// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
	UploadPeriodMinutes pulumi.IntPtrInput
	// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
	Url pulumi.StringPtrInput
	// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
	User pulumi.StringPtrInput
}

func (LogstreamConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstreamConfigurationArgs)(nil)).Elem()
}

type LogstreamConfigurationInput interface {
	pulumi.Input

	ToLogstreamConfigurationOutput() LogstreamConfigurationOutput
	ToLogstreamConfigurationOutputWithContext(ctx context.Context) LogstreamConfigurationOutput
}

func (*LogstreamConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstreamConfiguration)(nil)).Elem()
}

func (i *LogstreamConfiguration) ToLogstreamConfigurationOutput() LogstreamConfigurationOutput {
	return i.ToLogstreamConfigurationOutputWithContext(context.Background())
}

func (i *LogstreamConfiguration) ToLogstreamConfigurationOutputWithContext(ctx context.Context) LogstreamConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstreamConfigurationOutput)
}

// LogstreamConfigurationArrayInput is an input type that accepts LogstreamConfigurationArray and LogstreamConfigurationArrayOutput values.
// You can construct a concrete instance of `LogstreamConfigurationArrayInput` via:
//
//	LogstreamConfigurationArray{ LogstreamConfigurationArgs{...} }
type LogstreamConfigurationArrayInput interface {
	pulumi.Input

	ToLogstreamConfigurationArrayOutput() LogstreamConfigurationArrayOutput
	ToLogstreamConfigurationArrayOutputWithContext(context.Context) LogstreamConfigurationArrayOutput
}

type LogstreamConfigurationArray []LogstreamConfigurationInput

func (LogstreamConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstreamConfiguration)(nil)).Elem()
}

func (i LogstreamConfigurationArray) ToLogstreamConfigurationArrayOutput() LogstreamConfigurationArrayOutput {
	return i.ToLogstreamConfigurationArrayOutputWithContext(context.Background())
}

func (i LogstreamConfigurationArray) ToLogstreamConfigurationArrayOutputWithContext(ctx context.Context) LogstreamConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstreamConfigurationArrayOutput)
}

// LogstreamConfigurationMapInput is an input type that accepts LogstreamConfigurationMap and LogstreamConfigurationMapOutput values.
// You can construct a concrete instance of `LogstreamConfigurationMapInput` via:
//
//	LogstreamConfigurationMap{ "key": LogstreamConfigurationArgs{...} }
type LogstreamConfigurationMapInput interface {
	pulumi.Input

	ToLogstreamConfigurationMapOutput() LogstreamConfigurationMapOutput
	ToLogstreamConfigurationMapOutputWithContext(context.Context) LogstreamConfigurationMapOutput
}

type LogstreamConfigurationMap map[string]LogstreamConfigurationInput

func (LogstreamConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstreamConfiguration)(nil)).Elem()
}

func (i LogstreamConfigurationMap) ToLogstreamConfigurationMapOutput() LogstreamConfigurationMapOutput {
	return i.ToLogstreamConfigurationMapOutputWithContext(context.Background())
}

func (i LogstreamConfigurationMap) ToLogstreamConfigurationMapOutputWithContext(ctx context.Context) LogstreamConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstreamConfigurationMapOutput)
}

type LogstreamConfigurationOutput struct{ *pulumi.OutputState }

func (LogstreamConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstreamConfiguration)(nil)).Elem()
}

func (o LogstreamConfigurationOutput) ToLogstreamConfigurationOutput() LogstreamConfigurationOutput {
	return o
}

func (o LogstreamConfigurationOutput) ToLogstreamConfigurationOutputWithContext(ctx context.Context) LogstreamConfigurationOutput {
	return o
}

// The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
func (o LogstreamConfigurationOutput) CompressionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.CompressionFormat }).(pulumi.StringPtrOutput)
}

// The type of system to which logs are being streamed.
func (o LogstreamConfigurationOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
func (o LogstreamConfigurationOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringOutput { return v.LogType }).(pulumi.StringOutput)
}

// The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is 'accesskey'.
func (o LogstreamConfigurationOutput) S3AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3AccessKeyId }).(pulumi.StringPtrOutput)
}

// What type of authentication to use for S3. Required if destinationType is 's3'. Tailscale recommends using 'rolearn'.
func (o LogstreamConfigurationOutput) S3AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3AuthenticationType }).(pulumi.StringPtrOutput)
}

// The S3 bucket name. Required if destinationType is 's3'.
func (o LogstreamConfigurationOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is 's3' and s3*authentication*type is 'rolearn'. This can be obtained via the tailscale*aws*external*id resource.
func (o LogstreamConfigurationOutput) S3ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3ExternalId }).(pulumi.StringPtrOutput)
}

// An optional S3 key prefix to prepend to the auto-generated S3 key name.
func (o LogstreamConfigurationOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

// The region in which the S3 bucket is located. Required if destinationType is 's3'.
func (o LogstreamConfigurationOutput) S3Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3Region }).(pulumi.StringPtrOutput)
}

// ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is 's3' and s3*authentication_type is 'rolearn'.
func (o LogstreamConfigurationOutput) S3RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3RoleArn }).(pulumi.StringPtrOutput)
}

// The S3 secret access key. Required if destination*type is 's3' and s3*authentication_type is 'accesskey'.
func (o LogstreamConfigurationOutput) S3SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.S3SecretAccessKey }).(pulumi.StringPtrOutput)
}

// The token/password with which log streams to this endpoint should be authenticated, required unless destinationType is 's3'.
func (o LogstreamConfigurationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
func (o LogstreamConfigurationOutput) UploadPeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.IntPtrOutput { return v.UploadPeriodMinutes }).(pulumi.IntPtrOutput)
}

// The URL to which log streams are being posted. If destinationType is 's3' and you want to use the official Amazon S3 endpoint, leave this empty.
func (o LogstreamConfigurationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The username with which log streams to this endpoint are authenticated. Only required if destinationType is 'elastic', defaults to 'user' if not set.
func (o LogstreamConfigurationOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogstreamConfiguration) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type LogstreamConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LogstreamConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstreamConfiguration)(nil)).Elem()
}

func (o LogstreamConfigurationArrayOutput) ToLogstreamConfigurationArrayOutput() LogstreamConfigurationArrayOutput {
	return o
}

func (o LogstreamConfigurationArrayOutput) ToLogstreamConfigurationArrayOutputWithContext(ctx context.Context) LogstreamConfigurationArrayOutput {
	return o
}

func (o LogstreamConfigurationArrayOutput) Index(i pulumi.IntInput) LogstreamConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogstreamConfiguration {
		return vs[0].([]*LogstreamConfiguration)[vs[1].(int)]
	}).(LogstreamConfigurationOutput)
}

type LogstreamConfigurationMapOutput struct{ *pulumi.OutputState }

func (LogstreamConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstreamConfiguration)(nil)).Elem()
}

func (o LogstreamConfigurationMapOutput) ToLogstreamConfigurationMapOutput() LogstreamConfigurationMapOutput {
	return o
}

func (o LogstreamConfigurationMapOutput) ToLogstreamConfigurationMapOutputWithContext(ctx context.Context) LogstreamConfigurationMapOutput {
	return o
}

func (o LogstreamConfigurationMapOutput) MapIndex(k pulumi.StringInput) LogstreamConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogstreamConfiguration {
		return vs[0].(map[string]*LogstreamConfiguration)[vs[1].(string)]
	}).(LogstreamConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstreamConfigurationInput)(nil)).Elem(), &LogstreamConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstreamConfigurationArrayInput)(nil)).Elem(), LogstreamConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstreamConfigurationMapInput)(nil)).Elem(), LogstreamConfigurationMap{})
	pulumi.RegisterOutputType(LogstreamConfigurationOutput{})
	pulumi.RegisterOutputType(LogstreamConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LogstreamConfigurationMapOutput{})
}
