// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tailscale
{
    /// <summary>
    /// The `tailnet_key` resource allows you to generate pre-authentication keys for your tailnet. See the
    /// [Tailscale auth keys](https://tailscale.com/kb/1085/auth-keys/) documentation for more information
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tailscale = Pulumi.Tailscale;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var sampleKey = new Tailscale.TailnetKey("sampleKey", new Tailscale.TailnetKeyArgs
    ///         {
    ///             Ephemeral = false,
    ///             Reusable = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [TailscaleResourceType("tailscale:index/tailnetKey:TailnetKey")]
    public partial class TailnetKey : Pulumi.CustomResource
    {
        /// <summary>
        /// Determines if the generated key is ephemeral. Ephemeral keys are used for authenticating
        /// ephemeral nodes for short-lived workloads.
        /// </summary>
        [Output("ephemeral")]
        public Output<bool?> Ephemeral { get; private set; } = null!;

        /// <summary>
        /// The generated authentication key.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Determines if the generated key is reusable. Reusable keys can be used to connect multiple
        /// nodes. For example, multiple instances of on-prem database might use a reusable key to connect.
        /// </summary>
        [Output("reusable")]
        public Output<bool?> Reusable { get; private set; } = null!;

        /// <summary>
        /// Set of tags to apply to the machines authenticated by the key. These tags can be used in ACL
        /// rules, see the [Tailscale ACL tag documentation](https://tailscale.com/kb/1068/acl-tags/).
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a TailnetKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TailnetKey(string name, TailnetKeyArgs? args = null, CustomResourceOptions? options = null)
            : base("tailscale:index/tailnetKey:TailnetKey", name, args ?? new TailnetKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TailnetKey(string name, Input<string> id, TailnetKeyState? state = null, CustomResourceOptions? options = null)
            : base("tailscale:index/tailnetKey:TailnetKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TailnetKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TailnetKey Get(string name, Input<string> id, TailnetKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new TailnetKey(name, id, state, options);
        }
    }

    public sealed class TailnetKeyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the generated key is ephemeral. Ephemeral keys are used for authenticating
        /// ephemeral nodes for short-lived workloads.
        /// </summary>
        [Input("ephemeral")]
        public Input<bool>? Ephemeral { get; set; }

        /// <summary>
        /// Determines if the generated key is reusable. Reusable keys can be used to connect multiple
        /// nodes. For example, multiple instances of on-prem database might use a reusable key to connect.
        /// </summary>
        [Input("reusable")]
        public Input<bool>? Reusable { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags to apply to the machines authenticated by the key. These tags can be used in ACL
        /// rules, see the [Tailscale ACL tag documentation](https://tailscale.com/kb/1068/acl-tags/).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public TailnetKeyArgs()
        {
        }
    }

    public sealed class TailnetKeyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the generated key is ephemeral. Ephemeral keys are used for authenticating
        /// ephemeral nodes for short-lived workloads.
        /// </summary>
        [Input("ephemeral")]
        public Input<bool>? Ephemeral { get; set; }

        /// <summary>
        /// The generated authentication key.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Determines if the generated key is reusable. Reusable keys can be used to connect multiple
        /// nodes. For example, multiple instances of on-prem database might use a reusable key to connect.
        /// </summary>
        [Input("reusable")]
        public Input<bool>? Reusable { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags to apply to the machines authenticated by the key. These tags can be used in ACL
        /// rules, see the [Tailscale ACL tag documentation](https://tailscale.com/kb/1068/acl-tags/).
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public TailnetKeyState()
        {
        }
    }
}
