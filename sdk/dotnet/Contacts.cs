// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tailscale
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tailscale = Pulumi.Tailscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sampleContacts = new Tailscale.Contacts("sample_contacts", new()
    ///     {
    ///         Account = new Tailscale.Inputs.ContactsAccountArgs
    ///         {
    ///             Email = "account@example.com",
    ///         },
    ///         Support = new Tailscale.Inputs.ContactsSupportArgs
    ///         {
    ///             Email = "support@example.com",
    ///         },
    ///         Security = new Tailscale.Inputs.ContactsSecurityArgs
    ///         {
    ///             Email = "security@example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ID doesn't matter.
    /// 
    /// ```sh
    /// $ pulumi import tailscale:index/contacts:Contacts sample_contacts contacts
    /// ```
    /// </summary>
    [TailscaleResourceType("tailscale:index/contacts:Contacts")]
    public partial class Contacts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for communications about important changes to your tailnet
        /// </summary>
        [Output("account")]
        public Output<Outputs.ContactsAccount> Account { get; private set; } = null!;

        /// <summary>
        /// Configuration for communications about security issues affecting your tailnet
        /// </summary>
        [Output("security")]
        public Output<Outputs.ContactsSecurity> Security { get; private set; } = null!;

        /// <summary>
        /// Configuration for communications about misconfigurations in your tailnet
        /// </summary>
        [Output("support")]
        public Output<Outputs.ContactsSupport> Support { get; private set; } = null!;


        /// <summary>
        /// Create a Contacts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Contacts(string name, ContactsArgs args, CustomResourceOptions? options = null)
            : base("tailscale:index/contacts:Contacts", name, args ?? new ContactsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Contacts(string name, Input<string> id, ContactsState? state = null, CustomResourceOptions? options = null)
            : base("tailscale:index/contacts:Contacts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Contacts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Contacts Get(string name, Input<string> id, ContactsState? state = null, CustomResourceOptions? options = null)
        {
            return new Contacts(name, id, state, options);
        }
    }

    public sealed class ContactsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for communications about important changes to your tailnet
        /// </summary>
        [Input("account", required: true)]
        public Input<Inputs.ContactsAccountArgs> Account { get; set; } = null!;

        /// <summary>
        /// Configuration for communications about security issues affecting your tailnet
        /// </summary>
        [Input("security", required: true)]
        public Input<Inputs.ContactsSecurityArgs> Security { get; set; } = null!;

        /// <summary>
        /// Configuration for communications about misconfigurations in your tailnet
        /// </summary>
        [Input("support", required: true)]
        public Input<Inputs.ContactsSupportArgs> Support { get; set; } = null!;

        public ContactsArgs()
        {
        }
        public static new ContactsArgs Empty => new ContactsArgs();
    }

    public sealed class ContactsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for communications about important changes to your tailnet
        /// </summary>
        [Input("account")]
        public Input<Inputs.ContactsAccountGetArgs>? Account { get; set; }

        /// <summary>
        /// Configuration for communications about security issues affecting your tailnet
        /// </summary>
        [Input("security")]
        public Input<Inputs.ContactsSecurityGetArgs>? Security { get; set; }

        /// <summary>
        /// Configuration for communications about misconfigurations in your tailnet
        /// </summary>
        [Input("support")]
        public Input<Inputs.ContactsSupportGetArgs>? Support { get; set; }

        public ContactsState()
        {
        }
        public static new ContactsState Empty => new ContactsState();
    }
}
