// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tailscale
{
    public static class GetDevice
    {
        /// <summary>
        /// The device data source describes a single device in a tailnet
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tailscale = Pulumi.Tailscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sampleDevice = Tailscale.GetDevice.Invoke(new()
        ///     {
        ///         Name = "device1.example.ts.net",
        ///         WaitFor = "60s",
        ///     });
        /// 
        ///     var sampleDevice2 = Tailscale.GetDevice.Invoke(new()
        ///     {
        ///         Hostname = "device2",
        ///         WaitFor = "60s",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDeviceResult> InvokeAsync(GetDeviceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceResult>("tailscale:index/getDevice:getDevice", args ?? new GetDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// The device data source describes a single device in a tailnet
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tailscale = Pulumi.Tailscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sampleDevice = Tailscale.GetDevice.Invoke(new()
        ///     {
        ///         Name = "device1.example.ts.net",
        ///         WaitFor = "60s",
        ///     });
        /// 
        ///     var sampleDevice2 = Tailscale.GetDevice.Invoke(new()
        ///     {
        ///         Hostname = "device2",
        ///         WaitFor = "60s",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDeviceResult> Invoke(GetDeviceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceResult>("tailscale:index/getDevice:getDevice", args ?? new GetDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The short hostname of the device
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// The full name of the device (e.g. `hostname.domain.ts.net`)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// If specified, the provider will make multiple attempts to obtain the data source until the wait_for duration is reached. Retries are made every second so this value should be greater than 1s
        /// </summary>
        [Input("waitFor")]
        public string? WaitFor { get; set; }

        public GetDeviceArgs()
        {
        }
        public static new GetDeviceArgs Empty => new GetDeviceArgs();
    }

    public sealed class GetDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The short hostname of the device
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The full name of the device (e.g. `hostname.domain.ts.net`)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If specified, the provider will make multiple attempts to obtain the data source until the wait_for duration is reached. Retries are made every second so this value should be greater than 1s
        /// </summary>
        [Input("waitFor")]
        public Input<string>? WaitFor { get; set; }

        public GetDeviceInvokeArgs()
        {
        }
        public static new GetDeviceInvokeArgs Empty => new GetDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceResult
    {
        /// <summary>
        /// The list of device's IPs
        /// </summary>
        public readonly ImmutableArray<string> Addresses;
        /// <summary>
        /// The short hostname of the device
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The full name of the device (e.g. `hostname.domain.ts.net`)
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The tags applied to the device
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The user associated with the device
        /// </summary>
        public readonly string User;
        /// <summary>
        /// If specified, the provider will make multiple attempts to obtain the data source until the wait_for duration is reached. Retries are made every second so this value should be greater than 1s
        /// </summary>
        public readonly string? WaitFor;

        [OutputConstructor]
        private GetDeviceResult(
            ImmutableArray<string> addresses,

            string? hostname,

            string id,

            string? name,

            ImmutableArray<string> tags,

            string user,

            string? waitFor)
        {
            Addresses = addresses;
            Hostname = hostname;
            Id = id;
            Name = name;
            Tags = tags;
            User = user;
            WaitFor = waitFor;
        }
    }
}
