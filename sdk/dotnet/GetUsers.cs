// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tailscale
{
    public static class GetUsers
    {
        /// <summary>
        /// The users data source describes a list of users in a tailnet
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tailscale = Pulumi.Tailscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_users = Tailscale.GetUsers.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("tailscale:index/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// The users data source describes a list of users in a tailnet
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tailscale = Pulumi.Tailscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_users = Tailscale.GetUsers.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("tailscale:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters the users list to elements whose role is the provided value.
        /// </summary>
        [Input("role")]
        public string? Role { get; set; }

        /// <summary>
        /// Filters the users list to elements whose type is the provided value.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters the users list to elements whose role is the provided value.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Filters the users list to elements whose type is the provided value.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filters the users list to elements whose role is the provided value.
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// Filters the users list to elements whose type is the provided value.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The list of users in the tailnet
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string id,

            string? role,

            string? type,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            Id = id;
            Role = role;
            Type = type;
            Users = users;
        }
    }
}
