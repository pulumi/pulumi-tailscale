// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TailnetSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final TailnetSettingsState Empty = new TailnetSettingsState();

    /**
     * Whether device approval is enabled for the tailnet
     * 
     */
    @Import(name="devicesApprovalOn")
    private @Nullable Output<Boolean> devicesApprovalOn;

    /**
     * @return Whether device approval is enabled for the tailnet
     * 
     */
    public Optional<Output<Boolean>> devicesApprovalOn() {
        return Optional.ofNullable(this.devicesApprovalOn);
    }

    /**
     * Whether auto updates are enabled for devices that belong to this tailnet
     * 
     */
    @Import(name="devicesAutoUpdatesOn")
    private @Nullable Output<Boolean> devicesAutoUpdatesOn;

    /**
     * @return Whether auto updates are enabled for devices that belong to this tailnet
     * 
     */
    public Optional<Output<Boolean>> devicesAutoUpdatesOn() {
        return Optional.ofNullable(this.devicesAutoUpdatesOn);
    }

    /**
     * The key expiry duration for devices on this tailnet
     * 
     */
    @Import(name="devicesKeyDurationDays")
    private @Nullable Output<Integer> devicesKeyDurationDays;

    /**
     * @return The key expiry duration for devices on this tailnet
     * 
     */
    public Optional<Output<Integer>> devicesKeyDurationDays() {
        return Optional.ofNullable(this.devicesKeyDurationDays);
    }

    /**
     * Whether network flog logs are enabled for the tailnet
     * 
     */
    @Import(name="networkFlowLoggingOn")
    private @Nullable Output<Boolean> networkFlowLoggingOn;

    /**
     * @return Whether network flog logs are enabled for the tailnet
     * 
     */
    public Optional<Output<Boolean>> networkFlowLoggingOn() {
        return Optional.ofNullable(this.networkFlowLoggingOn);
    }

    /**
     * Whether identity collection is enabled for device posture integrations for the tailnet
     * 
     */
    @Import(name="postureIdentityCollectionOn")
    private @Nullable Output<Boolean> postureIdentityCollectionOn;

    /**
     * @return Whether identity collection is enabled for device posture integrations for the tailnet
     * 
     */
    public Optional<Output<Boolean>> postureIdentityCollectionOn() {
        return Optional.ofNullable(this.postureIdentityCollectionOn);
    }

    /**
     * Whether regional routing is enabled for the tailnet
     * 
     */
    @Import(name="regionalRoutingOn")
    private @Nullable Output<Boolean> regionalRoutingOn;

    /**
     * @return Whether regional routing is enabled for the tailnet
     * 
     */
    public Optional<Output<Boolean>> regionalRoutingOn() {
        return Optional.ofNullable(this.regionalRoutingOn);
    }

    /**
     * Whether user approval is enabled for this tailnet
     * 
     */
    @Import(name="usersApprovalOn")
    private @Nullable Output<Boolean> usersApprovalOn;

    /**
     * @return Whether user approval is enabled for this tailnet
     * 
     */
    public Optional<Output<Boolean>> usersApprovalOn() {
        return Optional.ofNullable(this.usersApprovalOn);
    }

    /**
     * Which user roles are allowed to join external tailnets
     * 
     */
    @Import(name="usersRoleAllowedToJoinExternalTailnet")
    private @Nullable Output<String> usersRoleAllowedToJoinExternalTailnet;

    /**
     * @return Which user roles are allowed to join external tailnets
     * 
     */
    public Optional<Output<String>> usersRoleAllowedToJoinExternalTailnet() {
        return Optional.ofNullable(this.usersRoleAllowedToJoinExternalTailnet);
    }

    private TailnetSettingsState() {}

    private TailnetSettingsState(TailnetSettingsState $) {
        this.devicesApprovalOn = $.devicesApprovalOn;
        this.devicesAutoUpdatesOn = $.devicesAutoUpdatesOn;
        this.devicesKeyDurationDays = $.devicesKeyDurationDays;
        this.networkFlowLoggingOn = $.networkFlowLoggingOn;
        this.postureIdentityCollectionOn = $.postureIdentityCollectionOn;
        this.regionalRoutingOn = $.regionalRoutingOn;
        this.usersApprovalOn = $.usersApprovalOn;
        this.usersRoleAllowedToJoinExternalTailnet = $.usersRoleAllowedToJoinExternalTailnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TailnetSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TailnetSettingsState $;

        public Builder() {
            $ = new TailnetSettingsState();
        }

        public Builder(TailnetSettingsState defaults) {
            $ = new TailnetSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param devicesApprovalOn Whether device approval is enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesApprovalOn(@Nullable Output<Boolean> devicesApprovalOn) {
            $.devicesApprovalOn = devicesApprovalOn;
            return this;
        }

        /**
         * @param devicesApprovalOn Whether device approval is enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesApprovalOn(Boolean devicesApprovalOn) {
            return devicesApprovalOn(Output.of(devicesApprovalOn));
        }

        /**
         * @param devicesAutoUpdatesOn Whether auto updates are enabled for devices that belong to this tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesAutoUpdatesOn(@Nullable Output<Boolean> devicesAutoUpdatesOn) {
            $.devicesAutoUpdatesOn = devicesAutoUpdatesOn;
            return this;
        }

        /**
         * @param devicesAutoUpdatesOn Whether auto updates are enabled for devices that belong to this tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesAutoUpdatesOn(Boolean devicesAutoUpdatesOn) {
            return devicesAutoUpdatesOn(Output.of(devicesAutoUpdatesOn));
        }

        /**
         * @param devicesKeyDurationDays The key expiry duration for devices on this tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesKeyDurationDays(@Nullable Output<Integer> devicesKeyDurationDays) {
            $.devicesKeyDurationDays = devicesKeyDurationDays;
            return this;
        }

        /**
         * @param devicesKeyDurationDays The key expiry duration for devices on this tailnet
         * 
         * @return builder
         * 
         */
        public Builder devicesKeyDurationDays(Integer devicesKeyDurationDays) {
            return devicesKeyDurationDays(Output.of(devicesKeyDurationDays));
        }

        /**
         * @param networkFlowLoggingOn Whether network flog logs are enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder networkFlowLoggingOn(@Nullable Output<Boolean> networkFlowLoggingOn) {
            $.networkFlowLoggingOn = networkFlowLoggingOn;
            return this;
        }

        /**
         * @param networkFlowLoggingOn Whether network flog logs are enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder networkFlowLoggingOn(Boolean networkFlowLoggingOn) {
            return networkFlowLoggingOn(Output.of(networkFlowLoggingOn));
        }

        /**
         * @param postureIdentityCollectionOn Whether identity collection is enabled for device posture integrations for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder postureIdentityCollectionOn(@Nullable Output<Boolean> postureIdentityCollectionOn) {
            $.postureIdentityCollectionOn = postureIdentityCollectionOn;
            return this;
        }

        /**
         * @param postureIdentityCollectionOn Whether identity collection is enabled for device posture integrations for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder postureIdentityCollectionOn(Boolean postureIdentityCollectionOn) {
            return postureIdentityCollectionOn(Output.of(postureIdentityCollectionOn));
        }

        /**
         * @param regionalRoutingOn Whether regional routing is enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder regionalRoutingOn(@Nullable Output<Boolean> regionalRoutingOn) {
            $.regionalRoutingOn = regionalRoutingOn;
            return this;
        }

        /**
         * @param regionalRoutingOn Whether regional routing is enabled for the tailnet
         * 
         * @return builder
         * 
         */
        public Builder regionalRoutingOn(Boolean regionalRoutingOn) {
            return regionalRoutingOn(Output.of(regionalRoutingOn));
        }

        /**
         * @param usersApprovalOn Whether user approval is enabled for this tailnet
         * 
         * @return builder
         * 
         */
        public Builder usersApprovalOn(@Nullable Output<Boolean> usersApprovalOn) {
            $.usersApprovalOn = usersApprovalOn;
            return this;
        }

        /**
         * @param usersApprovalOn Whether user approval is enabled for this tailnet
         * 
         * @return builder
         * 
         */
        public Builder usersApprovalOn(Boolean usersApprovalOn) {
            return usersApprovalOn(Output.of(usersApprovalOn));
        }

        /**
         * @param usersRoleAllowedToJoinExternalTailnet Which user roles are allowed to join external tailnets
         * 
         * @return builder
         * 
         */
        public Builder usersRoleAllowedToJoinExternalTailnet(@Nullable Output<String> usersRoleAllowedToJoinExternalTailnet) {
            $.usersRoleAllowedToJoinExternalTailnet = usersRoleAllowedToJoinExternalTailnet;
            return this;
        }

        /**
         * @param usersRoleAllowedToJoinExternalTailnet Which user roles are allowed to join external tailnets
         * 
         * @return builder
         * 
         */
        public Builder usersRoleAllowedToJoinExternalTailnet(String usersRoleAllowedToJoinExternalTailnet) {
            return usersRoleAllowedToJoinExternalTailnet(Output.of(usersRoleAllowedToJoinExternalTailnet));
        }

        public TailnetSettingsState build() {
            return $;
        }
    }

}
