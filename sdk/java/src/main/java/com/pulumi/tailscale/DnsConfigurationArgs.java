// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.tailscale.inputs.DnsConfigurationNameserverArgs;
import com.pulumi.tailscale.inputs.DnsConfigurationSplitDnArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsConfigurationArgs Empty = new DnsConfigurationArgs();

    /**
     * Whether or not to enable MagicDNS. Defaults to true.
     * 
     */
    @Import(name="magicDns")
    private @Nullable Output<Boolean> magicDns;

    /**
     * @return Whether or not to enable MagicDNS. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> magicDns() {
        return Optional.ofNullable(this.magicDns);
    }

    /**
     * Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
     * 
     */
    @Import(name="nameservers")
    private @Nullable Output<List<DnsConfigurationNameserverArgs>> nameservers;

    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
     * 
     */
    public Optional<Output<List<DnsConfigurationNameserverArgs>>> nameservers() {
        return Optional.ofNullable(this.nameservers);
    }

    /**
     * When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
     * 
     */
    @Import(name="overrideLocalDns")
    private @Nullable Output<Boolean> overrideLocalDns;

    /**
     * @return When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> overrideLocalDns() {
        return Optional.ofNullable(this.overrideLocalDns);
    }

    /**
     * Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
     * 
     */
    @Import(name="searchPaths")
    private @Nullable Output<List<String>> searchPaths;

    /**
     * @return Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
     * 
     */
    public Optional<Output<List<String>>> searchPaths() {
        return Optional.ofNullable(this.searchPaths);
    }

    /**
     * Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
     * 
     */
    @Import(name="splitDns")
    private @Nullable Output<List<DnsConfigurationSplitDnArgs>> splitDns;

    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
     * 
     */
    public Optional<Output<List<DnsConfigurationSplitDnArgs>>> splitDns() {
        return Optional.ofNullable(this.splitDns);
    }

    private DnsConfigurationArgs() {}

    private DnsConfigurationArgs(DnsConfigurationArgs $) {
        this.magicDns = $.magicDns;
        this.nameservers = $.nameservers;
        this.overrideLocalDns = $.overrideLocalDns;
        this.searchPaths = $.searchPaths;
        this.splitDns = $.splitDns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsConfigurationArgs $;

        public Builder() {
            $ = new DnsConfigurationArgs();
        }

        public Builder(DnsConfigurationArgs defaults) {
            $ = new DnsConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param magicDns Whether or not to enable MagicDNS. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder magicDns(@Nullable Output<Boolean> magicDns) {
            $.magicDns = magicDns;
            return this;
        }

        /**
         * @param magicDns Whether or not to enable MagicDNS. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder magicDns(Boolean magicDns) {
            return magicDns(Output.of(magicDns));
        }

        /**
         * @param nameservers Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(@Nullable Output<List<DnsConfigurationNameserverArgs>> nameservers) {
            $.nameservers = nameservers;
            return this;
        }

        /**
         * @param nameservers Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(List<DnsConfigurationNameserverArgs> nameservers) {
            return nameservers(Output.of(nameservers));
        }

        /**
         * @param nameservers Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(DnsConfigurationNameserverArgs... nameservers) {
            return nameservers(List.of(nameservers));
        }

        /**
         * @param overrideLocalDns When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder overrideLocalDns(@Nullable Output<Boolean> overrideLocalDns) {
            $.overrideLocalDns = overrideLocalDns;
            return this;
        }

        /**
         * @param overrideLocalDns When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder overrideLocalDns(Boolean overrideLocalDns) {
            return overrideLocalDns(Output.of(overrideLocalDns));
        }

        /**
         * @param searchPaths Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(@Nullable Output<List<String>> searchPaths) {
            $.searchPaths = searchPaths;
            return this;
        }

        /**
         * @param searchPaths Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(List<String> searchPaths) {
            return searchPaths(Output.of(searchPaths));
        }

        /**
         * @param searchPaths Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }

        /**
         * @param splitDns Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
         * 
         * @return builder
         * 
         */
        public Builder splitDns(@Nullable Output<List<DnsConfigurationSplitDnArgs>> splitDns) {
            $.splitDns = splitDns;
            return this;
        }

        /**
         * @param splitDns Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
         * 
         * @return builder
         * 
         */
        public Builder splitDns(List<DnsConfigurationSplitDnArgs> splitDns) {
            return splitDns(Output.of(splitDns));
        }

        /**
         * @param splitDns Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
         * 
         * @return builder
         * 
         */
        public Builder splitDns(DnsConfigurationSplitDnArgs... splitDns) {
            return splitDns(List.of(splitDns));
        }

        public DnsConfigurationArgs build() {
            return $;
        }
    }

}
