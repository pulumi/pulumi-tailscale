// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogstreamConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogstreamConfigurationArgs Empty = new LogstreamConfigurationArgs();

    /**
     * The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
     * 
     */
    @Import(name="compressionFormat")
    private @Nullable Output<String> compressionFormat;

    /**
     * @return The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
     * 
     */
    public Optional<Output<String>> compressionFormat() {
        return Optional.ofNullable(this.compressionFormat);
    }

    /**
     * The type of system to which logs are being streamed.
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The type of system to which logs are being streamed.
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
     * 
     */
    @Import(name="logType", required=true)
    private Output<String> logType;

    /**
     * @return The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
     * 
     */
    public Output<String> logType() {
        return this.logType;
    }

    /**
     * The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    @Import(name="s3AccessKeyId")
    private @Nullable Output<String> s3AccessKeyId;

    /**
     * @return The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    public Optional<Output<String>> s3AccessKeyId() {
        return Optional.ofNullable(this.s3AccessKeyId);
    }

    /**
     * What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
     * 
     */
    @Import(name="s3AuthenticationType")
    private @Nullable Output<String> s3AuthenticationType;

    /**
     * @return What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
     * 
     */
    public Optional<Output<String>> s3AuthenticationType() {
        return Optional.ofNullable(this.s3AuthenticationType);
    }

    /**
     * The S3 bucket name. Required if destination_type is &#39;s3&#39;.
     * 
     */
    @Import(name="s3Bucket")
    private @Nullable Output<String> s3Bucket;

    /**
     * @return The S3 bucket name. Required if destination_type is &#39;s3&#39;.
     * 
     */
    public Optional<Output<String>> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }

    /**
     * The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
     * 
     */
    @Import(name="s3ExternalId")
    private @Nullable Output<String> s3ExternalId;

    /**
     * @return The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
     * 
     */
    public Optional<Output<String>> s3ExternalId() {
        return Optional.ofNullable(this.s3ExternalId);
    }

    /**
     * An optional S3 key prefix to prepend to the auto-generated S3 key name.
     * 
     */
    @Import(name="s3KeyPrefix")
    private @Nullable Output<String> s3KeyPrefix;

    /**
     * @return An optional S3 key prefix to prepend to the auto-generated S3 key name.
     * 
     */
    public Optional<Output<String>> s3KeyPrefix() {
        return Optional.ofNullable(this.s3KeyPrefix);
    }

    /**
     * The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
     * 
     */
    @Import(name="s3Region")
    private @Nullable Output<String> s3Region;

    /**
     * @return The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
     * 
     */
    public Optional<Output<String>> s3Region() {
        return Optional.ofNullable(this.s3Region);
    }

    /**
     * ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
     * 
     */
    @Import(name="s3RoleArn")
    private @Nullable Output<String> s3RoleArn;

    /**
     * @return ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
     * 
     */
    public Optional<Output<String>> s3RoleArn() {
        return Optional.ofNullable(this.s3RoleArn);
    }

    /**
     * The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    @Import(name="s3SecretAccessKey")
    private @Nullable Output<String> s3SecretAccessKey;

    /**
     * @return The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    public Optional<Output<String>> s3SecretAccessKey() {
        return Optional.ofNullable(this.s3SecretAccessKey);
    }

    /**
     * The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
     * 
     */
    @Import(name="uploadPeriodMinutes")
    private @Nullable Output<Integer> uploadPeriodMinutes;

    /**
     * @return An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
     * 
     */
    public Optional<Output<Integer>> uploadPeriodMinutes() {
        return Optional.ofNullable(this.uploadPeriodMinutes);
    }

    /**
     * The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private LogstreamConfigurationArgs() {}

    private LogstreamConfigurationArgs(LogstreamConfigurationArgs $) {
        this.compressionFormat = $.compressionFormat;
        this.destinationType = $.destinationType;
        this.logType = $.logType;
        this.s3AccessKeyId = $.s3AccessKeyId;
        this.s3AuthenticationType = $.s3AuthenticationType;
        this.s3Bucket = $.s3Bucket;
        this.s3ExternalId = $.s3ExternalId;
        this.s3KeyPrefix = $.s3KeyPrefix;
        this.s3Region = $.s3Region;
        this.s3RoleArn = $.s3RoleArn;
        this.s3SecretAccessKey = $.s3SecretAccessKey;
        this.token = $.token;
        this.uploadPeriodMinutes = $.uploadPeriodMinutes;
        this.url = $.url;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogstreamConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogstreamConfigurationArgs $;

        public Builder() {
            $ = new LogstreamConfigurationArgs();
        }

        public Builder(LogstreamConfigurationArgs defaults) {
            $ = new LogstreamConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compressionFormat The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder compressionFormat(@Nullable Output<String> compressionFormat) {
            $.compressionFormat = compressionFormat;
            return this;
        }

        /**
         * @param compressionFormat The compression algorithm with which to compress logs. One of `none`, `zstd` or `gzip`. Defaults to `none`.
         * 
         * @return builder
         * 
         */
        public Builder compressionFormat(String compressionFormat) {
            return compressionFormat(Output.of(compressionFormat));
        }

        /**
         * @param destinationType The type of system to which logs are being streamed.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of system to which logs are being streamed.
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param logType The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
         * 
         * @return builder
         * 
         */
        public Builder logType(Output<String> logType) {
            $.logType = logType;
            return this;
        }

        /**
         * @param logType The type of log that is streamed to this endpoint. Either `configuration` for configuration audit logs, or `network` for network flow logs.
         * 
         * @return builder
         * 
         */
        public Builder logType(String logType) {
            return logType(Output.of(logType));
        }

        /**
         * @param s3AccessKeyId The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3AccessKeyId(@Nullable Output<String> s3AccessKeyId) {
            $.s3AccessKeyId = s3AccessKeyId;
            return this;
        }

        /**
         * @param s3AccessKeyId The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3AccessKeyId(String s3AccessKeyId) {
            return s3AccessKeyId(Output.of(s3AccessKeyId));
        }

        /**
         * @param s3AuthenticationType What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3AuthenticationType(@Nullable Output<String> s3AuthenticationType) {
            $.s3AuthenticationType = s3AuthenticationType;
            return this;
        }

        /**
         * @param s3AuthenticationType What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3AuthenticationType(String s3AuthenticationType) {
            return s3AuthenticationType(Output.of(s3AuthenticationType));
        }

        /**
         * @param s3Bucket The S3 bucket name. Required if destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(@Nullable Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        /**
         * @param s3Bucket The S3 bucket name. Required if destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        /**
         * @param s3ExternalId The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
         * 
         * @return builder
         * 
         */
        public Builder s3ExternalId(@Nullable Output<String> s3ExternalId) {
            $.s3ExternalId = s3ExternalId;
            return this;
        }

        /**
         * @param s3ExternalId The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
         * 
         * @return builder
         * 
         */
        public Builder s3ExternalId(String s3ExternalId) {
            return s3ExternalId(Output.of(s3ExternalId));
        }

        /**
         * @param s3KeyPrefix An optional S3 key prefix to prepend to the auto-generated S3 key name.
         * 
         * @return builder
         * 
         */
        public Builder s3KeyPrefix(@Nullable Output<String> s3KeyPrefix) {
            $.s3KeyPrefix = s3KeyPrefix;
            return this;
        }

        /**
         * @param s3KeyPrefix An optional S3 key prefix to prepend to the auto-generated S3 key name.
         * 
         * @return builder
         * 
         */
        public Builder s3KeyPrefix(String s3KeyPrefix) {
            return s3KeyPrefix(Output.of(s3KeyPrefix));
        }

        /**
         * @param s3Region The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3Region(@Nullable Output<String> s3Region) {
            $.s3Region = s3Region;
            return this;
        }

        /**
         * @param s3Region The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3Region(String s3Region) {
            return s3Region(Output.of(s3Region));
        }

        /**
         * @param s3RoleArn ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3RoleArn(@Nullable Output<String> s3RoleArn) {
            $.s3RoleArn = s3RoleArn;
            return this;
        }

        /**
         * @param s3RoleArn ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3RoleArn(String s3RoleArn) {
            return s3RoleArn(Output.of(s3RoleArn));
        }

        /**
         * @param s3SecretAccessKey The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3SecretAccessKey(@Nullable Output<String> s3SecretAccessKey) {
            $.s3SecretAccessKey = s3SecretAccessKey;
            return this;
        }

        /**
         * @param s3SecretAccessKey The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
         * 
         * @return builder
         * 
         */
        public Builder s3SecretAccessKey(String s3SecretAccessKey) {
            return s3SecretAccessKey(Output.of(s3SecretAccessKey));
        }

        /**
         * @param token The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param uploadPeriodMinutes An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
         * 
         * @return builder
         * 
         */
        public Builder uploadPeriodMinutes(@Nullable Output<Integer> uploadPeriodMinutes) {
            $.uploadPeriodMinutes = uploadPeriodMinutes;
            return this;
        }

        /**
         * @param uploadPeriodMinutes An optional number of minutes to wait in between uploading new logs. If the quantity of logs does not fit within a single upload, multiple uploads will be made.
         * 
         * @return builder
         * 
         */
        public Builder uploadPeriodMinutes(Integer uploadPeriodMinutes) {
            return uploadPeriodMinutes(Output.of(uploadPeriodMinutes));
        }

        /**
         * @param url The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param user The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public LogstreamConfigurationArgs build() {
            if ($.destinationType == null) {
                throw new MissingRequiredPropertyException("LogstreamConfigurationArgs", "destinationType");
            }
            if ($.logType == null) {
                throw new MissingRequiredPropertyException("LogstreamConfigurationArgs", "logType");
            }
            return $;
        }
    }

}
