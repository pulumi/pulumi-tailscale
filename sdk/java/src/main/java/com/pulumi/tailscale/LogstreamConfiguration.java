// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.tailscale.LogstreamConfigurationArgs;
import com.pulumi.tailscale.Utilities;
import com.pulumi.tailscale.inputs.LogstreamConfigurationState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The logstream_configuration resource allows you to configure streaming configuration or network flow logs to a supported security information and event management (SIEM) system. See https://tailscale.com/kb/1255/log-streaming for more information.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.tailscale.LogstreamConfiguration;
 * import com.pulumi.tailscale.LogstreamConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Example configuration for a non-S3 logstreaming endpoint
 *         var sampleLogstreamConfiguration = new LogstreamConfiguration("sampleLogstreamConfiguration", LogstreamConfigurationArgs.builder()
 *             .logType("configuration")
 *             .destinationType("panther")
 *             .url("https://example.com")
 *             .token("some-token")
 *             .build());
 * 
 *         // Example configuration for an AWS S3 logstreaming endpoint
 *         var sampleLogstreamConfigurationS3 = new LogstreamConfiguration("sampleLogstreamConfigurationS3", LogstreamConfigurationArgs.builder()
 *             .logType("configuration")
 *             .destinationType("s3")
 *             .s3Bucket(tailscaleLogs.id())
 *             .s3Region("us-west-2")
 *             .s3AuthenticationType("rolearn")
 *             .s3RoleArn(tailscaleLogsWriter.arn())
 *             .s3ExternalId(prod.externalId())
 *             .build());
 * 
 *         // Example configuration for an S3-compatible logstreaming endpoint
 *         var sampleLogstreamConfigurationS3Compatible = new LogstreamConfiguration("sampleLogstreamConfigurationS3Compatible", LogstreamConfigurationArgs.builder()
 *             .logType("configuration")
 *             .destinationType("s3")
 *             .url("https://s3.example.com")
 *             .s3Bucket("example-bucket")
 *             .s3Region("us-west-2")
 *             .s3AuthenticationType("accesskey")
 *             .s3AccessKeyId("some-access-key")
 *             .s3SecretAccessKey("some-secret-key")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Logstream configuration can be imported using the logstream configuration id, e.g.,
 * 
 * ```sh
 * $ pulumi import tailscale:index/logstreamConfiguration:LogstreamConfiguration sample_logstream_configuration 123456789
 * ```
 * 
 */
@ResourceType(type="tailscale:index/logstreamConfiguration:LogstreamConfiguration")
public class LogstreamConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * The type of system to which logs are being streamed.
     * 
     */
    @Export(name="destinationType", refs={String.class}, tree="[0]")
    private Output<String> destinationType;

    /**
     * @return The type of system to which logs are being streamed.
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }
    /**
     * The type of log that is streamed to this endpoint.
     * 
     */
    @Export(name="logType", refs={String.class}, tree="[0]")
    private Output<String> logType;

    /**
     * @return The type of log that is streamed to this endpoint.
     * 
     */
    public Output<String> logType() {
        return this.logType;
    }
    /**
     * The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    @Export(name="s3AccessKeyId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3AccessKeyId;

    /**
     * @return The S3 access key ID. Required if destination*type is s3 and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    public Output<Optional<String>> s3AccessKeyId() {
        return Codegen.optional(this.s3AccessKeyId);
    }
    /**
     * What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
     * 
     */
    @Export(name="s3AuthenticationType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3AuthenticationType;

    /**
     * @return What type of authentication to use for S3. Required if destination_type is &#39;s3&#39;. Tailscale recommends using &#39;rolearn&#39;.
     * 
     */
    public Output<Optional<String>> s3AuthenticationType() {
        return Codegen.optional(this.s3AuthenticationType);
    }
    /**
     * The S3 bucket name. Required if destination_type is &#39;s3&#39;.
     * 
     */
    @Export(name="s3Bucket", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3Bucket;

    /**
     * @return The S3 bucket name. Required if destination_type is &#39;s3&#39;.
     * 
     */
    public Output<Optional<String>> s3Bucket() {
        return Codegen.optional(this.s3Bucket);
    }
    /**
     * The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
     * 
     */
    @Export(name="s3ExternalId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3ExternalId;

    /**
     * @return The AWS External ID that Tailscale supplies when authenticating using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication*type is &#39;rolearn&#39;. This can be obtained via the tailscale*aws*external*id resource.
     * 
     */
    public Output<Optional<String>> s3ExternalId() {
        return Codegen.optional(this.s3ExternalId);
    }
    /**
     * An optional S3 key prefix to prepend to the auto-generated S3 key name.
     * 
     */
    @Export(name="s3KeyPrefix", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3KeyPrefix;

    /**
     * @return An optional S3 key prefix to prepend to the auto-generated S3 key name.
     * 
     */
    public Output<Optional<String>> s3KeyPrefix() {
        return Codegen.optional(this.s3KeyPrefix);
    }
    /**
     * The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
     * 
     */
    @Export(name="s3Region", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3Region;

    /**
     * @return The region in which the S3 bucket is located. Required if destination_type is &#39;s3&#39;.
     * 
     */
    public Output<Optional<String>> s3Region() {
        return Codegen.optional(this.s3Region);
    }
    /**
     * ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
     * 
     */
    @Export(name="s3RoleArn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3RoleArn;

    /**
     * @return ARN of the AWS IAM role that Tailscale should assume when using role-based authentication. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;rolearn&#39;.
     * 
     */
    public Output<Optional<String>> s3RoleArn() {
        return Codegen.optional(this.s3RoleArn);
    }
    /**
     * The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    @Export(name="s3SecretAccessKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3SecretAccessKey;

    /**
     * @return The S3 secret access key. Required if destination*type is &#39;s3&#39; and s3*authentication_type is &#39;accesskey&#39;.
     * 
     */
    public Output<Optional<String>> s3SecretAccessKey() {
        return Codegen.optional(this.s3SecretAccessKey);
    }
    /**
     * The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> token;

    /**
     * @return The token/password with which log streams to this endpoint should be authenticated, required unless destination_type is &#39;s3&#39;.
     * 
     */
    public Output<Optional<String>> token() {
        return Codegen.optional(this.token);
    }
    /**
     * The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> url;

    /**
     * @return The URL to which log streams are being posted. If destination_type is &#39;s3&#39; and you want to use the official Amazon S3 endpoint, leave this empty.
     * 
     */
    public Output<Optional<String>> url() {
        return Codegen.optional(this.url);
    }
    /**
     * The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
     * 
     */
    @Export(name="user", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> user;

    /**
     * @return The username with which log streams to this endpoint are authenticated. Only required if destination_type is &#39;elastic&#39;, defaults to &#39;user&#39; if not set.
     * 
     */
    public Output<Optional<String>> user() {
        return Codegen.optional(this.user);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogstreamConfiguration(java.lang.String name) {
        this(name, LogstreamConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogstreamConfiguration(java.lang.String name, LogstreamConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogstreamConfiguration(java.lang.String name, LogstreamConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("tailscale:index/logstreamConfiguration:LogstreamConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LogstreamConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable LogstreamConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("tailscale:index/logstreamConfiguration:LogstreamConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static LogstreamConfigurationArgs makeArgs(LogstreamConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LogstreamConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "s3SecretAccessKey",
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogstreamConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable LogstreamConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogstreamConfiguration(name, id, state, options);
    }
}
