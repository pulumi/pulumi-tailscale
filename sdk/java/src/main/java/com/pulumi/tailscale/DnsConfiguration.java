// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.tailscale.DnsConfigurationArgs;
import com.pulumi.tailscale.Utilities;
import com.pulumi.tailscale.inputs.DnsConfigurationState;
import com.pulumi.tailscale.outputs.DnsConfigurationNameserver;
import com.pulumi.tailscale.outputs.DnsConfigurationSplitDn;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.tailscale.DnsConfiguration;
 * import com.pulumi.tailscale.DnsConfigurationArgs;
 * import com.pulumi.tailscale.inputs.DnsConfigurationNameserverArgs;
 * import com.pulumi.tailscale.inputs.DnsConfigurationSplitDnArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sampleConfiguration = new DnsConfiguration("sampleConfiguration", DnsConfigurationArgs.builder()
 *             .nameservers(            
 *                 DnsConfigurationNameserverArgs.builder()
 *                     .address("8.8.8.8")
 *                     .build(),
 *                 DnsConfigurationNameserverArgs.builder()
 *                     .address("1.1.1.1")
 *                     .useWithExitNode(true)
 *                     .build())
 *             .splitDns(            
 *                 DnsConfigurationSplitDnArgs.builder()
 *                     .domain("foo.example.com")
 *                     .nameservers(                    
 *                         DnsConfigurationSplitDnNameserverArgs.builder()
 *                             .address("1.1.1.2")
 *                             .useWithExitNode(true)
 *                             .build(),
 *                         DnsConfigurationSplitDnNameserverArgs.builder()
 *                             .address("1.1.1.3")
 *                             .build())
 *                     .build(),
 *                 DnsConfigurationSplitDnArgs.builder()
 *                     .domain("bar.example.com")
 *                     .nameservers(DnsConfigurationSplitDnNameserverArgs.builder()
 *                         .address("8.8.8.2")
 *                         .useWithExitNode(true)
 *                         .build())
 *                     .build())
 *             .searchPaths(            
 *                 "example.com",
 *                 "anotherexample.com")
 *             .overrideLocalDns(true)
 *             .magicDns(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ID doesn&#39;t matter.
 * 
 * ```sh
 * $ pulumi import tailscale:index/dnsConfiguration:DnsConfiguration sample_configuration dns_configuration
 * ```
 * 
 */
@ResourceType(type="tailscale:index/dnsConfiguration:DnsConfiguration")
public class DnsConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * Whether or not to enable MagicDNS. Defaults to true.
     * 
     */
    @Export(name="magicDns", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> magicDns;

    /**
     * @return Whether or not to enable MagicDNS. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> magicDns() {
        return Codegen.optional(this.magicDns);
    }
    /**
     * Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
     * 
     */
    @Export(name="nameservers", refs={List.class,DnsConfigurationNameserver.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DnsConfigurationNameserver>> nameservers;

    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries. `overrideLocalDns` must also be true to prefer these nameservers over local DNS configuration.
     * 
     */
    public Output<Optional<List<DnsConfigurationNameserver>>> nameservers() {
        return Codegen.optional(this.nameservers);
    }
    /**
     * When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
     * 
     */
    @Export(name="overrideLocalDns", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> overrideLocalDns;

    /**
     * @return When enabled, use the configured DNS servers in `nameservers` to resolve names outside the tailnet. When disabled, devices will prefer their local DNS configuration. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> overrideLocalDns() {
        return Codegen.optional(this.overrideLocalDns);
    }
    /**
     * Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
     * 
     */
    @Export(name="searchPaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> searchPaths;

    /**
     * @return Additional search domains. When MagicDNS is on, the tailnet domain is automatically included as the first search domain.
     * 
     */
    public Output<Optional<List<String>>> searchPaths() {
        return Codegen.optional(this.searchPaths);
    }
    /**
     * Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
     * 
     */
    @Export(name="splitDns", refs={List.class,DnsConfigurationSplitDn.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DnsConfigurationSplitDn>> splitDns;

    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries on specific domains (requires Tailscale v1.8 or later). Configuration does not depend on `overrideLocalDns`.
     * 
     */
    public Output<Optional<List<DnsConfigurationSplitDn>>> splitDns() {
        return Codegen.optional(this.splitDns);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DnsConfiguration(java.lang.String name) {
        this(name, DnsConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DnsConfiguration(java.lang.String name, @Nullable DnsConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DnsConfiguration(java.lang.String name, @Nullable DnsConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("tailscale:index/dnsConfiguration:DnsConfiguration", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DnsConfiguration(java.lang.String name, Output<java.lang.String> id, @Nullable DnsConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("tailscale:index/dnsConfiguration:DnsConfiguration", name, state, makeResourceOptions(options, id), false);
    }

    private static DnsConfigurationArgs makeArgs(@Nullable DnsConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DnsConfigurationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DnsConfiguration get(java.lang.String name, Output<java.lang.String> id, @Nullable DnsConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DnsConfiguration(name, id, state, options);
    }
}
