// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclArgs extends com.pulumi.resources.ResourceArgs {

    public static final AclArgs Empty = new AclArgs();

    /**
     * The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
     * 
     */
    @Import(name="acl", required=true)
    private Output<String> acl;

    /**
     * @return The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
     * 
     */
    public Output<String> acl() {
        return this.acl;
    }

    /**
     * If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
     * 
     */
    @Import(name="overwriteExistingContent")
    private @Nullable Output<Boolean> overwriteExistingContent;

    /**
     * @return If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
     * 
     */
    public Optional<Output<Boolean>> overwriteExistingContent() {
        return Optional.ofNullable(this.overwriteExistingContent);
    }

    /**
     * If true, will reset the ACL for the Tailnet to the default when this resource is destroyed
     * 
     */
    @Import(name="resetAclOnDestroy")
    private @Nullable Output<Boolean> resetAclOnDestroy;

    /**
     * @return If true, will reset the ACL for the Tailnet to the default when this resource is destroyed
     * 
     */
    public Optional<Output<Boolean>> resetAclOnDestroy() {
        return Optional.ofNullable(this.resetAclOnDestroy);
    }

    private AclArgs() {}

    private AclArgs(AclArgs $) {
        this.acl = $.acl;
        this.overwriteExistingContent = $.overwriteExistingContent;
        this.resetAclOnDestroy = $.resetAclOnDestroy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclArgs $;

        public Builder() {
            $ = new AclArgs();
        }

        public Builder(AclArgs defaults) {
            $ = new AclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
         * 
         * @return builder
         * 
         */
        public Builder acl(Output<String> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The policy that defines which devices and users are allowed to connect in your network. Can be either a JSON or a HuJSON string.
         * 
         * @return builder
         * 
         */
        public Builder acl(String acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param overwriteExistingContent If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
         * 
         * @return builder
         * 
         */
        public Builder overwriteExistingContent(@Nullable Output<Boolean> overwriteExistingContent) {
            $.overwriteExistingContent = overwriteExistingContent;
            return this;
        }

        /**
         * @param overwriteExistingContent If true, will skip requirement to import acl before allowing changes. Be careful, can cause ACL to be overwritten
         * 
         * @return builder
         * 
         */
        public Builder overwriteExistingContent(Boolean overwriteExistingContent) {
            return overwriteExistingContent(Output.of(overwriteExistingContent));
        }

        /**
         * @param resetAclOnDestroy If true, will reset the ACL for the Tailnet to the default when this resource is destroyed
         * 
         * @return builder
         * 
         */
        public Builder resetAclOnDestroy(@Nullable Output<Boolean> resetAclOnDestroy) {
            $.resetAclOnDestroy = resetAclOnDestroy;
            return this;
        }

        /**
         * @param resetAclOnDestroy If true, will reset the ACL for the Tailnet to the default when this resource is destroyed
         * 
         * @return builder
         * 
         */
        public Builder resetAclOnDestroy(Boolean resetAclOnDestroy) {
            return resetAclOnDestroy(Output.of(resetAclOnDestroy));
        }

        public AclArgs build() {
            if ($.acl == null) {
                throw new MissingRequiredPropertyException("AclArgs", "acl");
            }
            return $;
        }
    }

}
