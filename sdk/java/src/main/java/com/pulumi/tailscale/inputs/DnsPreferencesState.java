// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsPreferencesState extends com.pulumi.resources.ResourceArgs {

    public static final DnsPreferencesState Empty = new DnsPreferencesState();

    /**
     * Whether or not to enable magic DNS
     * 
     */
    @Import(name="magicDns")
    private @Nullable Output<Boolean> magicDns;

    /**
     * @return Whether or not to enable magic DNS
     * 
     */
    public Optional<Output<Boolean>> magicDns() {
        return Optional.ofNullable(this.magicDns);
    }

    private DnsPreferencesState() {}

    private DnsPreferencesState(DnsPreferencesState $) {
        this.magicDns = $.magicDns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsPreferencesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsPreferencesState $;

        public Builder() {
            $ = new DnsPreferencesState();
        }

        public Builder(DnsPreferencesState defaults) {
            $ = new DnsPreferencesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param magicDns Whether or not to enable magic DNS
         * 
         * @return builder
         * 
         */
        public Builder magicDns(@Nullable Output<Boolean> magicDns) {
            $.magicDns = magicDns;
            return this;
        }

        /**
         * @param magicDns Whether or not to enable magic DNS
         * 
         * @return builder
         * 
         */
        public Builder magicDns(Boolean magicDns) {
            return magicDns(Output.of(magicDns));
        }

        public DnsPreferencesState build() {
            return $;
        }
    }

}
