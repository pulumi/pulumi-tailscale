// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostureIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostureIntegrationArgs Empty = new PostureIntegrationArgs();

    /**
     * Unique identifier for your client.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Unique identifier for your client.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The secret (auth key, token, etc.) used to authenticate with the provider.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return The secret (auth key, token, etc.) used to authenticate with the provider.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * Identifies which of the provider&#39;s clouds to integrate with.
     * 
     */
    @Import(name="cloudId")
    private @Nullable Output<String> cloudId;

    /**
     * @return Identifies which of the provider&#39;s clouds to integrate with.
     * 
     */
    public Optional<Output<String>> cloudId() {
        return Optional.ofNullable(this.cloudId);
    }

    /**
     * The type of posture integration data provider.
     * 
     */
    @Import(name="postureProvider", required=true)
    private Output<String> postureProvider;

    /**
     * @return The type of posture integration data provider.
     * 
     */
    public Output<String> postureProvider() {
        return this.postureProvider;
    }

    /**
     * The Microsoft Intune directory (tenant) ID. For other providers, this is left blank.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The Microsoft Intune directory (tenant) ID. For other providers, this is left blank.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private PostureIntegrationArgs() {}

    private PostureIntegrationArgs(PostureIntegrationArgs $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.cloudId = $.cloudId;
        this.postureProvider = $.postureProvider;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostureIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostureIntegrationArgs $;

        public Builder() {
            $ = new PostureIntegrationArgs();
        }

        public Builder(PostureIntegrationArgs defaults) {
            $ = new PostureIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Unique identifier for your client.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Unique identifier for your client.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The secret (auth key, token, etc.) used to authenticate with the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The secret (auth key, token, etc.) used to authenticate with the provider.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param cloudId Identifies which of the provider&#39;s clouds to integrate with.
         * 
         * @return builder
         * 
         */
        public Builder cloudId(@Nullable Output<String> cloudId) {
            $.cloudId = cloudId;
            return this;
        }

        /**
         * @param cloudId Identifies which of the provider&#39;s clouds to integrate with.
         * 
         * @return builder
         * 
         */
        public Builder cloudId(String cloudId) {
            return cloudId(Output.of(cloudId));
        }

        /**
         * @param postureProvider The type of posture integration data provider.
         * 
         * @return builder
         * 
         */
        public Builder postureProvider(Output<String> postureProvider) {
            $.postureProvider = postureProvider;
            return this;
        }

        /**
         * @param postureProvider The type of posture integration data provider.
         * 
         * @return builder
         * 
         */
        public Builder postureProvider(String postureProvider) {
            return postureProvider(Output.of(postureProvider));
        }

        /**
         * @param tenantId The Microsoft Intune directory (tenant) ID. For other providers, this is left blank.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Microsoft Intune directory (tenant) ID. For other providers, this is left blank.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public PostureIntegrationArgs build() {
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("PostureIntegrationArgs", "clientSecret");
            }
            if ($.postureProvider == null) {
                throw new MissingRequiredPropertyException("PostureIntegrationArgs", "postureProvider");
            }
            return $;
        }
    }

}
