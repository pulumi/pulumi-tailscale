// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.tailscale.outputs.DnsConfigurationSplitDnNameserver;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DnsConfigurationSplitDn {
    /**
     * @return The nameservers will be used only for this domain.
     * 
     */
    private String domain;
    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries.
     * 
     */
    private List<DnsConfigurationSplitDnNameserver> nameservers;

    private DnsConfigurationSplitDn() {}
    /**
     * @return The nameservers will be used only for this domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Set the nameservers used by devices on your network to resolve DNS queries.
     * 
     */
    public List<DnsConfigurationSplitDnNameserver> nameservers() {
        return this.nameservers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DnsConfigurationSplitDn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private List<DnsConfigurationSplitDnNameserver> nameservers;
        public Builder() {}
        public Builder(DnsConfigurationSplitDn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.nameservers = defaults.nameservers;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("DnsConfigurationSplitDn", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder nameservers(List<DnsConfigurationSplitDnNameserver> nameservers) {
            if (nameservers == null) {
              throw new MissingRequiredPropertyException("DnsConfigurationSplitDn", "nameservers");
            }
            this.nameservers = nameservers;
            return this;
        }
        public Builder nameservers(DnsConfigurationSplitDnNameserver... nameservers) {
            return nameservers(List.of(nameservers));
        }
        public DnsConfigurationSplitDn build() {
            final var _resultValue = new DnsConfigurationSplitDn();
            _resultValue.domain = domain;
            _resultValue.nameservers = nameservers;
            return _resultValue;
        }
    }
}
