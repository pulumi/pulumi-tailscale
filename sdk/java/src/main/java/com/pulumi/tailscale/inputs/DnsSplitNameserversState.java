// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tailscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsSplitNameserversState extends com.pulumi.resources.ResourceArgs {

    public static final DnsSplitNameserversState Empty = new DnsSplitNameserversState();

    /**
     * Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
     * 
     */
    @Import(name="nameservers")
    private @Nullable Output<List<String>> nameservers;

    /**
     * @return Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
     * 
     */
    public Optional<Output<List<String>>> nameservers() {
        return Optional.ofNullable(this.nameservers);
    }

    private DnsSplitNameserversState() {}

    private DnsSplitNameserversState(DnsSplitNameserversState $) {
        this.domain = $.domain;
        this.nameservers = $.nameservers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsSplitNameserversState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsSplitNameserversState $;

        public Builder() {
            $ = new DnsSplitNameserversState();
        }

        public Builder(DnsSplitNameserversState defaults) {
            $ = new DnsSplitNameserversState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain to configure split DNS for. Requests for this domain will be resolved using the provided nameservers.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param nameservers Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(@Nullable Output<List<String>> nameservers) {
            $.nameservers = nameservers;
            return this;
        }

        /**
         * @param nameservers Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(List<String> nameservers) {
            return nameservers(Output.of(nameservers));
        }

        /**
         * @param nameservers Devices on your network will use these nameservers to resolve DNS names. IPv4 or IPv6 addresses are accepted.
         * 
         * @return builder
         * 
         */
        public Builder nameservers(String... nameservers) {
            return nameservers(List.of(nameservers));
        }

        public DnsSplitNameserversState build() {
            return $;
        }
    }

}
